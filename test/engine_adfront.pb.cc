// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine_adfront.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "engine_adfront.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AdEngineFront {

namespace {

const ::google::protobuf::Descriptor* AdFrontRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontRequest_PageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontRequest_PageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontRequest_Mobile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontRequest_Mobile_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontRequest_PositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontRequest_PositionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontResponse_UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontResponse_UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontResponse_PositionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo_CreativeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontResponse_PositionInfo_CreativeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_engine_5fadfront_2eproto() {
  protobuf_AddDesc_engine_5fadfront_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "engine_adfront.proto");
  GOOGLE_CHECK(file != NULL);
  AdFrontRequest_descriptor_ = file->message_type(0);
  static const int AdFrontRequest_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, user_agent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, page_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, mobile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, position_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, is_debug_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, carousel_random_id_),
  };
  AdFrontRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontRequest_descriptor_,
      AdFrontRequest::default_instance_,
      AdFrontRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontRequest));
  AdFrontRequest_PageInfo_descriptor_ = AdFrontRequest_descriptor_->nested_type(0);
  static const int AdFrontRequest_PageInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, is_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_auto_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_auto_serie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, page_auto_level_),
  };
  AdFrontRequest_PageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontRequest_PageInfo_descriptor_,
      AdFrontRequest_PageInfo::default_instance_,
      AdFrontRequest_PageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontRequest_PageInfo));
  AdFrontRequest_Mobile_descriptor_ = AdFrontRequest_descriptor_->nested_type(1);
  static const int AdFrontRequest_Mobile_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, os_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, is_app_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, longitude_),
  };
  AdFrontRequest_Mobile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontRequest_Mobile_descriptor_,
      AdFrontRequest_Mobile::default_instance_,
      AdFrontRequest_Mobile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_Mobile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontRequest_Mobile));
  AdFrontRequest_PositionInfo_descriptor_ = AdFrontRequest_descriptor_->nested_type(2);
  static const int AdFrontRequest_PositionInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PositionInfo, position_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PositionInfo, pv_id_),
  };
  AdFrontRequest_PositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontRequest_PositionInfo_descriptor_,
      AdFrontRequest_PositionInfo::default_instance_,
      AdFrontRequest_PositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontRequest_PositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontRequest_PositionInfo));
  AdFrontResponse_descriptor_ = file->message_type(1);
  static const int AdFrontResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, req_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, user_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, position_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, algorithm_bucket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, processing_time_ms_),
  };
  AdFrontResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontResponse_descriptor_,
      AdFrontResponse::default_instance_,
      AdFrontResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontResponse));
  AdFrontResponse_UserInfo_descriptor_ = AdFrontResponse_descriptor_->nested_type(0);
  static const int AdFrontResponse_UserInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_auto_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_auto_serie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_auto_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_auto_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, user_city_),
  };
  AdFrontResponse_UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontResponse_UserInfo_descriptor_,
      AdFrontResponse_UserInfo::default_instance_,
      AdFrontResponse_UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontResponse_UserInfo));
  AdFrontResponse_PositionInfo_descriptor_ = AdFrontResponse_descriptor_->nested_type(1);
  static const int AdFrontResponse_PositionInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, position_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, pv_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, sell_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, creative_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, request_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, rank_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, position_label_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, carouselid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, algo_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, width_height_),
  };
  AdFrontResponse_PositionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontResponse_PositionInfo_descriptor_,
      AdFrontResponse_PositionInfo::default_instance_,
      AdFrontResponse_PositionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontResponse_PositionInfo));
  AdFrontResponse_PositionInfo_CreativeInfo_descriptor_ = AdFrontResponse_PositionInfo_descriptor_->nested_type(0);
  static const int AdFrontResponse_PositionInfo_CreativeInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, width_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, word_chain_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, sell_model_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, is_internal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, campaign_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, group_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_target_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_html_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_ecpm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, creative_column_),
  };
  AdFrontResponse_PositionInfo_CreativeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontResponse_PositionInfo_CreativeInfo_descriptor_,
      AdFrontResponse_PositionInfo_CreativeInfo::default_instance_,
      AdFrontResponse_PositionInfo_CreativeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontResponse_PositionInfo_CreativeInfo));
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_ = AdFrontResponse_PositionInfo_CreativeInfo_descriptor_->nested_type(0);
  static const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, mobile_platform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, mobile_connection_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_delivery_hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_auto_brand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_auto_serie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, page_auto_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, user_auto_serie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, user_auto_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, user_auto_price_),
  };
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_,
      AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance_,
      AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_engine_5fadfront_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontRequest_descriptor_, &AdFrontRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontRequest_PageInfo_descriptor_, &AdFrontRequest_PageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontRequest_Mobile_descriptor_, &AdFrontRequest_Mobile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontRequest_PositionInfo_descriptor_, &AdFrontRequest_PositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontResponse_descriptor_, &AdFrontResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontResponse_UserInfo_descriptor_, &AdFrontResponse_UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontResponse_PositionInfo_descriptor_, &AdFrontResponse_PositionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontResponse_PositionInfo_CreativeInfo_descriptor_, &AdFrontResponse_PositionInfo_CreativeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_, &AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_engine_5fadfront_2eproto() {
  delete AdFrontRequest::default_instance_;
  delete AdFrontRequest_reflection_;
  delete AdFrontRequest_PageInfo::default_instance_;
  delete AdFrontRequest_PageInfo_reflection_;
  delete AdFrontRequest_Mobile::default_instance_;
  delete AdFrontRequest_Mobile_reflection_;
  delete AdFrontRequest_PositionInfo::default_instance_;
  delete AdFrontRequest_PositionInfo_reflection_;
  delete AdFrontResponse::default_instance_;
  delete AdFrontResponse_reflection_;
  delete AdFrontResponse_UserInfo::default_instance_;
  delete AdFrontResponse_UserInfo_reflection_;
  delete AdFrontResponse_PositionInfo::default_instance_;
  delete AdFrontResponse_PositionInfo_reflection_;
  delete AdFrontResponse_PositionInfo_CreativeInfo::default_instance_;
  delete AdFrontResponse_PositionInfo_CreativeInfo_reflection_;
  delete AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance_;
  delete AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_reflection_;
}

void protobuf_AddDesc_engine_5fadfront_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024engine_adfront.proto\022\rAdEngineFront\"\300\005"
    "\n\016AdFrontRequest\022\016\n\006req_id\030\001 \002(\t\022\n\n\002ip\030\002"
    " \001(\t\022\022\n\nuser_agent\030\003 \001(\t\022\017\n\007user_id\030\004 \001("
    "\t\0229\n\tpage_info\030\005 \001(\0132&.AdEngineFront.AdF"
    "rontRequest.PageInfo\0224\n\006mobile\030\006 \001(\0132$.A"
    "dEngineFront.AdFrontRequest.Mobile\022A\n\rpo"
    "sition_info\030\007 \003(\0132*.AdEngineFront.AdFron"
    "tRequest.PositionInfo\022\027\n\010is_debug\030\010 \001(\010:"
    "\005false\022\032\n\022carousel_random_id\030\t \001(\004\032\253\001\n\010P"
    "ageInfo\022\017\n\007page_id\030\001 \002(\t\022\031\n\013is_multiple\030"
    "\002 \001(\010:\004true\022\025\n\rpage_province\030\003 \001(\t\022\021\n\tpa"
    "ge_city\030\004 \001(\t\022\027\n\017page_auto_brand\030\005 \003(\t\022\027"
    "\n\017page_auto_serie\030\006 \003(\t\022\027\n\017page_auto_lev"
    "el\030\007 \003(\t\032\241\001\n\006Mobile\022\020\n\010platform\030\001 \001(\t\022\r\n"
    "\005brand\030\002 \001(\t\022\r\n\005model\030\003 \001(\t\022\022\n\nos_versio"
    "n\030\004 \001(\t\022\027\n\017connection_type\030\005 \001(\t\022\025\n\006is_a"
    "pp\030\006 \001(\010:\005false\022\020\n\010latitude\030\007 \001(\005\022\021\n\tlon"
    "gitude\030\010 \001(\005\0322\n\014PositionInfo\022\023\n\013position"
    "_id\030\001 \002(\004\022\r\n\005pv_id\030\002 \001(\t\"\301\n\n\017AdFrontResp"
    "onse\022\016\n\006req_id\030\001 \002(\t\022:\n\tuser_info\030\002 \001(\0132"
    "\'.AdEngineFront.AdFrontResponse.UserInfo"
    "\022B\n\rposition_info\030\003 \003(\0132+.AdEngineFront."
    "AdFrontResponse.PositionInfo\022\030\n\020algorith"
    "m_bucket\030\004 \001(\t\022\032\n\022processing_time_ms\030\005 \001"
    "(\005\032\230\001\n\010UserInfo\022\027\n\017user_auto_brand\030\001 \003(\t"
    "\022\027\n\017user_auto_serie\030\007 \003(\t\022\027\n\017user_auto_l"
    "evel\030\002 \003(\t\022\027\n\017user_auto_price\030\003 \003(\t\022\025\n\ru"
    "ser_province\030\004 \001(\t\022\021\n\tuser_city\030\005 \001(\t\032\314\007"
    "\n\014PositionInfo\022\023\n\013position_id\030\001 \002(\004\022\r\n\005p"
    "v_id\030\002 \001(\t\022\022\n\nsell_model\030\003 \003(\t\022O\n\rcreati"
    "ve_info\030\004 \001(\01328.AdEngineFront.AdFrontRes"
    "ponse.PositionInfo.CreativeInfo\022\024\n\014reque"
    "st_path\030\005 \001(\t\022\021\n\trank_path\030\006 \001(\t\022\026\n\016posi"
    "tion_label\030\007 \001(\t\022\022\n\ncarouselid\030\010 \001(\004\022\023\n\013"
    "algo_detail\030\t \001(\t\022\024\n\014width_height\030\n \001(\t\032"
    "\262\005\n\014CreativeInfo\022\023\n\013creative_id\030\001 \002(\004\022\025\n"
    "\rcreative_type\030\002 \001(\t\022\025\n\rcreative_size\030\003 "
    "\001(\t\022\024\n\014width_height\030\004 \001(\t\022\026\n\016word_chain_"
    "len\030\005 \001(\t\022\022\n\nsell_model\030\006 \001(\t\022\023\n\013is_inte"
    "rnal\030\007 \001(\010\022\020\n\010order_id\030\010 \001(\004\022\023\n\013campaign"
    "_id\030\t \001(\004\022\020\n\010group_id\030\n \001(\004\022`\n\017creative_"
    "target\030\013 \001(\0132G.AdEngineFront.AdFrontResp"
    "onse.PositionInfo.CreativeInfo.CreativeT"
    "arget\022\025\n\rcreative_html\030\014 \001(\t\022\025\n\rcreative"
    "_ecpm\030\r \001(\002\022\027\n\017creative_column\030\016 \001(\004\032\245\002\n"
    "\016CreativeTarget\022\027\n\017mobile_platform\030\001 \003(\t"
    "\022\036\n\026mobile_connection_type\030\002 \003(\t\022\032\n\022page"
    "_delivery_hour\030\003 \003(\t\022\025\n\rpage_province\030\004 "
    "\003(\t\022\021\n\tpage_city\030\005 \003(\t\022\027\n\017page_auto_bran"
    "d\030\006 \003(\t\022\027\n\017page_auto_serie\030\007 \003(\t\022\027\n\017page"
    "_auto_level\030\010 \003(\t\022\027\n\017user_auto_serie\030\n \003"
    "(\t\022\027\n\017user_auto_level\030\013 \003(\t\022\027\n\017user_auto"
    "_price\030\014 \003(\t", 2092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "engine_adfront.proto", &protobuf_RegisterTypes);
  AdFrontRequest::default_instance_ = new AdFrontRequest();
  AdFrontRequest_PageInfo::default_instance_ = new AdFrontRequest_PageInfo();
  AdFrontRequest_Mobile::default_instance_ = new AdFrontRequest_Mobile();
  AdFrontRequest_PositionInfo::default_instance_ = new AdFrontRequest_PositionInfo();
  AdFrontResponse::default_instance_ = new AdFrontResponse();
  AdFrontResponse_UserInfo::default_instance_ = new AdFrontResponse_UserInfo();
  AdFrontResponse_PositionInfo::default_instance_ = new AdFrontResponse_PositionInfo();
  AdFrontResponse_PositionInfo_CreativeInfo::default_instance_ = new AdFrontResponse_PositionInfo_CreativeInfo();
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance_ = new AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget();
  AdFrontRequest::default_instance_->InitAsDefaultInstance();
  AdFrontRequest_PageInfo::default_instance_->InitAsDefaultInstance();
  AdFrontRequest_Mobile::default_instance_->InitAsDefaultInstance();
  AdFrontRequest_PositionInfo::default_instance_->InitAsDefaultInstance();
  AdFrontResponse::default_instance_->InitAsDefaultInstance();
  AdFrontResponse_UserInfo::default_instance_->InitAsDefaultInstance();
  AdFrontResponse_PositionInfo::default_instance_->InitAsDefaultInstance();
  AdFrontResponse_PositionInfo_CreativeInfo::default_instance_->InitAsDefaultInstance();
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_engine_5fadfront_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_engine_5fadfront_2eproto {
  StaticDescriptorInitializer_engine_5fadfront_2eproto() {
    protobuf_AddDesc_engine_5fadfront_2eproto();
  }
} static_descriptor_initializer_engine_5fadfront_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AdFrontRequest_PageInfo::kPageIdFieldNumber;
const int AdFrontRequest_PageInfo::kIsMultipleFieldNumber;
const int AdFrontRequest_PageInfo::kPageProvinceFieldNumber;
const int AdFrontRequest_PageInfo::kPageCityFieldNumber;
const int AdFrontRequest_PageInfo::kPageAutoBrandFieldNumber;
const int AdFrontRequest_PageInfo::kPageAutoSerieFieldNumber;
const int AdFrontRequest_PageInfo::kPageAutoLevelFieldNumber;
#endif  // !_MSC_VER

AdFrontRequest_PageInfo::AdFrontRequest_PageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontRequest_PageInfo::InitAsDefaultInstance() {
}

AdFrontRequest_PageInfo::AdFrontRequest_PageInfo(const AdFrontRequest_PageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontRequest_PageInfo::SharedCtor() {
  _cached_size_ = 0;
  page_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_multiple_ = true;
  page_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontRequest_PageInfo::~AdFrontRequest_PageInfo() {
  SharedDtor();
}

void AdFrontRequest_PageInfo::SharedDtor() {
  if (page_id_ != &::google::protobuf::internal::kEmptyString) {
    delete page_id_;
  }
  if (page_province_ != &::google::protobuf::internal::kEmptyString) {
    delete page_province_;
  }
  if (page_city_ != &::google::protobuf::internal::kEmptyString) {
    delete page_city_;
  }
  if (this != default_instance_) {
  }
}

void AdFrontRequest_PageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontRequest_PageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontRequest_PageInfo_descriptor_;
}

const AdFrontRequest_PageInfo& AdFrontRequest_PageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontRequest_PageInfo* AdFrontRequest_PageInfo::default_instance_ = NULL;

AdFrontRequest_PageInfo* AdFrontRequest_PageInfo::New() const {
  return new AdFrontRequest_PageInfo;
}

void AdFrontRequest_PageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_page_id()) {
      if (page_id_ != &::google::protobuf::internal::kEmptyString) {
        page_id_->clear();
      }
    }
    is_multiple_ = true;
    if (has_page_province()) {
      if (page_province_ != &::google::protobuf::internal::kEmptyString) {
        page_province_->clear();
      }
    }
    if (has_page_city()) {
      if (page_city_ != &::google::protobuf::internal::kEmptyString) {
        page_city_->clear();
      }
    }
  }
  page_auto_brand_.Clear();
  page_auto_serie_.Clear();
  page_auto_level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontRequest_PageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string page_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_id().data(), this->page_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_multiple;
        break;
      }

      // optional bool is_multiple = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_multiple_)));
          set_has_is_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_page_province;
        break;
      }

      // optional string page_province = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_province().data(), this->page_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_city;
        break;
      }

      // optional string page_city = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_city().data(), this->page_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_auto_brand;
        break;
      }

      // repeated string page_auto_brand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_brand(this->page_auto_brand_size() - 1).data(),
            this->page_auto_brand(this->page_auto_brand_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_auto_brand;
        if (input->ExpectTag(50)) goto parse_page_auto_serie;
        break;
      }

      // repeated string page_auto_serie = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_serie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_serie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_serie(this->page_auto_serie_size() - 1).data(),
            this->page_auto_serie(this->page_auto_serie_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page_auto_serie;
        if (input->ExpectTag(58)) goto parse_page_auto_level;
        break;
      }

      // repeated string page_auto_level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_level(this->page_auto_level_size() - 1).data(),
            this->page_auto_level(this->page_auto_level_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_page_auto_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontRequest_PageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_id().data(), this->page_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->page_id(), output);
  }

  // optional bool is_multiple = 2 [default = true];
  if (has_is_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_multiple(), output);
  }

  // optional string page_province = 3;
  if (has_page_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_province().data(), this->page_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->page_province(), output);
  }

  // optional string page_city = 4;
  if (has_page_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_city().data(), this->page_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->page_city(), output);
  }

  // repeated string page_auto_brand = 5;
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_brand(i).data(), this->page_auto_brand(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->page_auto_brand(i), output);
  }

  // repeated string page_auto_serie = 6;
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_serie(i).data(), this->page_auto_serie(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page_auto_serie(i), output);
  }

  // repeated string page_auto_level = 7;
  for (int i = 0; i < this->page_auto_level_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_level(i).data(), this->page_auto_level(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->page_auto_level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontRequest_PageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string page_id = 1;
  if (has_page_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_id().data(), this->page_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->page_id(), target);
  }

  // optional bool is_multiple = 2 [default = true];
  if (has_is_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_multiple(), target);
  }

  // optional string page_province = 3;
  if (has_page_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_province().data(), this->page_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_province(), target);
  }

  // optional string page_city = 4;
  if (has_page_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_city().data(), this->page_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_city(), target);
  }

  // repeated string page_auto_brand = 5;
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_brand(i).data(), this->page_auto_brand(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->page_auto_brand(i), target);
  }

  // repeated string page_auto_serie = 6;
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_serie(i).data(), this->page_auto_serie(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->page_auto_serie(i), target);
  }

  // repeated string page_auto_level = 7;
  for (int i = 0; i < this->page_auto_level_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_level(i).data(), this->page_auto_level(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->page_auto_level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontRequest_PageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string page_id = 1;
    if (has_page_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_id());
    }

    // optional bool is_multiple = 2 [default = true];
    if (has_is_multiple()) {
      total_size += 1 + 1;
    }

    // optional string page_province = 3;
    if (has_page_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_province());
    }

    // optional string page_city = 4;
    if (has_page_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->page_city());
    }

  }
  // repeated string page_auto_brand = 5;
  total_size += 1 * this->page_auto_brand_size();
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_brand(i));
  }

  // repeated string page_auto_serie = 6;
  total_size += 1 * this->page_auto_serie_size();
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_serie(i));
  }

  // repeated string page_auto_level = 7;
  total_size += 1 * this->page_auto_level_size();
  for (int i = 0; i < this->page_auto_level_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_level(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontRequest_PageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontRequest_PageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontRequest_PageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontRequest_PageInfo::MergeFrom(const AdFrontRequest_PageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  page_auto_brand_.MergeFrom(from.page_auto_brand_);
  page_auto_serie_.MergeFrom(from.page_auto_serie_);
  page_auto_level_.MergeFrom(from.page_auto_level_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page_id()) {
      set_page_id(from.page_id());
    }
    if (from.has_is_multiple()) {
      set_is_multiple(from.is_multiple());
    }
    if (from.has_page_province()) {
      set_page_province(from.page_province());
    }
    if (from.has_page_city()) {
      set_page_city(from.page_city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontRequest_PageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontRequest_PageInfo::CopyFrom(const AdFrontRequest_PageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontRequest_PageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdFrontRequest_PageInfo::Swap(AdFrontRequest_PageInfo* other) {
  if (other != this) {
    std::swap(page_id_, other->page_id_);
    std::swap(is_multiple_, other->is_multiple_);
    std::swap(page_province_, other->page_province_);
    std::swap(page_city_, other->page_city_);
    page_auto_brand_.Swap(&other->page_auto_brand_);
    page_auto_serie_.Swap(&other->page_auto_serie_);
    page_auto_level_.Swap(&other->page_auto_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontRequest_PageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontRequest_PageInfo_descriptor_;
  metadata.reflection = AdFrontRequest_PageInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontRequest_Mobile::kPlatformFieldNumber;
const int AdFrontRequest_Mobile::kBrandFieldNumber;
const int AdFrontRequest_Mobile::kModelFieldNumber;
const int AdFrontRequest_Mobile::kOsVersionFieldNumber;
const int AdFrontRequest_Mobile::kConnectionTypeFieldNumber;
const int AdFrontRequest_Mobile::kIsAppFieldNumber;
const int AdFrontRequest_Mobile::kLatitudeFieldNumber;
const int AdFrontRequest_Mobile::kLongitudeFieldNumber;
#endif  // !_MSC_VER

AdFrontRequest_Mobile::AdFrontRequest_Mobile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontRequest_Mobile::InitAsDefaultInstance() {
}

AdFrontRequest_Mobile::AdFrontRequest_Mobile(const AdFrontRequest_Mobile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontRequest_Mobile::SharedCtor() {
  _cached_size_ = 0;
  platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  connection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_app_ = false;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontRequest_Mobile::~AdFrontRequest_Mobile() {
  SharedDtor();
}

void AdFrontRequest_Mobile::SharedDtor() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
    delete connection_type_;
  }
  if (this != default_instance_) {
  }
}

void AdFrontRequest_Mobile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontRequest_Mobile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontRequest_Mobile_descriptor_;
}

const AdFrontRequest_Mobile& AdFrontRequest_Mobile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontRequest_Mobile* AdFrontRequest_Mobile::default_instance_ = NULL;

AdFrontRequest_Mobile* AdFrontRequest_Mobile::New() const {
  return new AdFrontRequest_Mobile;
}

void AdFrontRequest_Mobile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_platform()) {
      if (platform_ != &::google::protobuf::internal::kEmptyString) {
        platform_->clear();
      }
    }
    if (has_brand()) {
      if (brand_ != &::google::protobuf::internal::kEmptyString) {
        brand_->clear();
      }
    }
    if (has_model()) {
      if (model_ != &::google::protobuf::internal::kEmptyString) {
        model_->clear();
      }
    }
    if (has_os_version()) {
      if (os_version_ != &::google::protobuf::internal::kEmptyString) {
        os_version_->clear();
      }
    }
    if (has_connection_type()) {
      if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
        connection_type_->clear();
      }
    }
    is_app_ = false;
    latitude_ = 0;
    longitude_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontRequest_Mobile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->platform().data(), this->platform().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_brand;
        break;
      }

      // optional string brand = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->brand().data(), this->brand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_model;
        break;
      }

      // optional string model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_os_version;
        break;
      }

      // optional string os_version = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_os_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->os_version().data(), this->os_version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_connection_type;
        break;
      }

      // optional string connection_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connection_type().data(), this->connection_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_is_app;
        break;
      }

      // optional bool is_app = 6 [default = false];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_app:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_app_)));
          set_has_is_app();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_latitude;
        break;
      }

      // optional int32 latitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_longitude;
        break;
      }

      // optional int32 longitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontRequest_Mobile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->platform(), output);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->brand(), output);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->model(), output);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->os_version(), output);
  }

  // optional string connection_type = 5;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_type().data(), this->connection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->connection_type(), output);
  }

  // optional bool is_app = 6 [default = false];
  if (has_is_app()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_app(), output);
  }

  // optional int32 latitude = 7;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->latitude(), output);
  }

  // optional int32 longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontRequest_Mobile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string platform = 1;
  if (has_platform()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->platform().data(), this->platform().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->platform(), target);
  }

  // optional string brand = 2;
  if (has_brand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->brand().data(), this->brand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->brand(), target);
  }

  // optional string model = 3;
  if (has_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->model(), target);
  }

  // optional string os_version = 4;
  if (has_os_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->os_version().data(), this->os_version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->os_version(), target);
  }

  // optional string connection_type = 5;
  if (has_connection_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connection_type().data(), this->connection_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->connection_type(), target);
  }

  // optional bool is_app = 6 [default = false];
  if (has_is_app()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_app(), target);
  }

  // optional int32 latitude = 7;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->latitude(), target);
  }

  // optional int32 longitude = 8;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontRequest_Mobile::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string platform = 1;
    if (has_platform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->platform());
    }

    // optional string brand = 2;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->brand());
    }

    // optional string model = 3;
    if (has_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->model());
    }

    // optional string os_version = 4;
    if (has_os_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->os_version());
    }

    // optional string connection_type = 5;
    if (has_connection_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connection_type());
    }

    // optional bool is_app = 6 [default = false];
    if (has_is_app()) {
      total_size += 1 + 1;
    }

    // optional int32 latitude = 7;
    if (has_latitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latitude());
    }

    // optional int32 longitude = 8;
    if (has_longitude()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longitude());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontRequest_Mobile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontRequest_Mobile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontRequest_Mobile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontRequest_Mobile::MergeFrom(const AdFrontRequest_Mobile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_platform()) {
      set_platform(from.platform());
    }
    if (from.has_brand()) {
      set_brand(from.brand());
    }
    if (from.has_model()) {
      set_model(from.model());
    }
    if (from.has_os_version()) {
      set_os_version(from.os_version());
    }
    if (from.has_connection_type()) {
      set_connection_type(from.connection_type());
    }
    if (from.has_is_app()) {
      set_is_app(from.is_app());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontRequest_Mobile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontRequest_Mobile::CopyFrom(const AdFrontRequest_Mobile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontRequest_Mobile::IsInitialized() const {

  return true;
}

void AdFrontRequest_Mobile::Swap(AdFrontRequest_Mobile* other) {
  if (other != this) {
    std::swap(platform_, other->platform_);
    std::swap(brand_, other->brand_);
    std::swap(model_, other->model_);
    std::swap(os_version_, other->os_version_);
    std::swap(connection_type_, other->connection_type_);
    std::swap(is_app_, other->is_app_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontRequest_Mobile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontRequest_Mobile_descriptor_;
  metadata.reflection = AdFrontRequest_Mobile_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontRequest_PositionInfo::kPositionIdFieldNumber;
const int AdFrontRequest_PositionInfo::kPvIdFieldNumber;
#endif  // !_MSC_VER

AdFrontRequest_PositionInfo::AdFrontRequest_PositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontRequest_PositionInfo::InitAsDefaultInstance() {
}

AdFrontRequest_PositionInfo::AdFrontRequest_PositionInfo(const AdFrontRequest_PositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontRequest_PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  position_id_ = GOOGLE_ULONGLONG(0);
  pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontRequest_PositionInfo::~AdFrontRequest_PositionInfo() {
  SharedDtor();
}

void AdFrontRequest_PositionInfo::SharedDtor() {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pv_id_;
  }
  if (this != default_instance_) {
  }
}

void AdFrontRequest_PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontRequest_PositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontRequest_PositionInfo_descriptor_;
}

const AdFrontRequest_PositionInfo& AdFrontRequest_PositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontRequest_PositionInfo* AdFrontRequest_PositionInfo::default_instance_ = NULL;

AdFrontRequest_PositionInfo* AdFrontRequest_PositionInfo::New() const {
  return new AdFrontRequest_PositionInfo;
}

void AdFrontRequest_PositionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_id_ = GOOGLE_ULONGLONG(0);
    if (has_pv_id()) {
      if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
        pv_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontRequest_PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 position_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_id_)));
          set_has_position_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pv_id;
        break;
      }

      // optional string pv_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pv_id().data(), this->pv_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontRequest_PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 position_id = 1;
  if (has_position_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->position_id(), output);
  }

  // optional string pv_id = 2;
  if (has_pv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pv_id().data(), this->pv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pv_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontRequest_PositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 position_id = 1;
  if (has_position_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->position_id(), target);
  }

  // optional string pv_id = 2;
  if (has_pv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pv_id().data(), this->pv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pv_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontRequest_PositionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 position_id = 1;
    if (has_position_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position_id());
    }

    // optional string pv_id = 2;
    if (has_pv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pv_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontRequest_PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontRequest_PositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontRequest_PositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontRequest_PositionInfo::MergeFrom(const AdFrontRequest_PositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_id()) {
      set_position_id(from.position_id());
    }
    if (from.has_pv_id()) {
      set_pv_id(from.pv_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontRequest_PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontRequest_PositionInfo::CopyFrom(const AdFrontRequest_PositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontRequest_PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdFrontRequest_PositionInfo::Swap(AdFrontRequest_PositionInfo* other) {
  if (other != this) {
    std::swap(position_id_, other->position_id_);
    std::swap(pv_id_, other->pv_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontRequest_PositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontRequest_PositionInfo_descriptor_;
  metadata.reflection = AdFrontRequest_PositionInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontRequest::kReqIdFieldNumber;
const int AdFrontRequest::kIpFieldNumber;
const int AdFrontRequest::kUserAgentFieldNumber;
const int AdFrontRequest::kUserIdFieldNumber;
const int AdFrontRequest::kPageInfoFieldNumber;
const int AdFrontRequest::kMobileFieldNumber;
const int AdFrontRequest::kPositionInfoFieldNumber;
const int AdFrontRequest::kIsDebugFieldNumber;
const int AdFrontRequest::kCarouselRandomIdFieldNumber;
#endif  // !_MSC_VER

AdFrontRequest::AdFrontRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontRequest::InitAsDefaultInstance() {
  page_info_ = const_cast< ::AdEngineFront::AdFrontRequest_PageInfo*>(&::AdEngineFront::AdFrontRequest_PageInfo::default_instance());
  mobile_ = const_cast< ::AdEngineFront::AdFrontRequest_Mobile*>(&::AdEngineFront::AdFrontRequest_Mobile::default_instance());
}

AdFrontRequest::AdFrontRequest(const AdFrontRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontRequest::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  page_info_ = NULL;
  mobile_ = NULL;
  is_debug_ = false;
  carousel_random_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontRequest::~AdFrontRequest() {
  SharedDtor();
}

void AdFrontRequest::SharedDtor() {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete req_id_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (this != default_instance_) {
    delete page_info_;
    delete mobile_;
  }
}

void AdFrontRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontRequest_descriptor_;
}

const AdFrontRequest& AdFrontRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontRequest* AdFrontRequest::default_instance_ = NULL;

AdFrontRequest* AdFrontRequest::New() const {
  return new AdFrontRequest;
}

void AdFrontRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_id()) {
      if (req_id_ != &::google::protobuf::internal::kEmptyString) {
        req_id_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    if (has_user_agent()) {
      if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
        user_agent_->clear();
      }
    }
    if (has_user_id()) {
      if (user_id_ != &::google::protobuf::internal::kEmptyString) {
        user_id_->clear();
      }
    }
    if (has_page_info()) {
      if (page_info_ != NULL) page_info_->::AdEngineFront::AdFrontRequest_PageInfo::Clear();
    }
    if (has_mobile()) {
      if (mobile_ != NULL) mobile_->::AdEngineFront::AdFrontRequest_Mobile::Clear();
    }
    is_debug_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carousel_random_id_ = GOOGLE_ULONGLONG(0);
  }
  position_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_id().data(), this->req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // optional string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_agent;
        break;
      }

      // optional string user_agent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_agent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_agent().data(), this->user_agent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user_id;
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_id().data(), this->user_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_info;
        break;
      }

      // optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_page_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mobile;
        break;
      }

      // optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mobile()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_position_info;
        break;
      }

      // repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_position_info;
        if (input->ExpectTag(64)) goto parse_is_debug;
        break;
      }

      // optional bool is_debug = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debug_)));
          set_has_is_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_carousel_random_id;
        break;
      }

      // optional uint64 carousel_random_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carousel_random_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &carousel_random_id_)));
          set_has_carousel_random_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_id().data(), this->req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->req_id(), output);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_agent(), output);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_id(), output);
  }

  // optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
  if (has_page_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->page_info(), output);
  }

  // optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
  if (has_mobile()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mobile(), output);
  }

  // repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
  for (int i = 0; i < this->position_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->position_info(i), output);
  }

  // optional bool is_debug = 8 [default = false];
  if (has_is_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->is_debug(), output);
  }

  // optional uint64 carousel_random_id = 9;
  if (has_carousel_random_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->carousel_random_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_id().data(), this->req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_id(), target);
  }

  // optional string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // optional string user_agent = 3;
  if (has_user_agent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_agent().data(), this->user_agent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user_agent(), target);
  }

  // optional string user_id = 4;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_id().data(), this->user_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_id(), target);
  }

  // optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
  if (has_page_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->page_info(), target);
  }

  // optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
  if (has_mobile()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mobile(), target);
  }

  // repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
  for (int i = 0; i < this->position_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->position_info(i), target);
  }

  // optional bool is_debug = 8 [default = false];
  if (has_is_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->is_debug(), target);
  }

  // optional uint64 carousel_random_id = 9;
  if (has_carousel_random_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->carousel_random_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_id());
    }

    // optional string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional string user_agent = 3;
    if (has_user_agent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_agent());
    }

    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
    if (has_page_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->page_info());
    }

    // optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
    if (has_mobile()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mobile());
    }

    // optional bool is_debug = 8 [default = false];
    if (has_is_debug()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 carousel_random_id = 9;
    if (has_carousel_random_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->carousel_random_id());
    }

  }
  // repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
  total_size += 1 * this->position_info_size();
  for (int i = 0; i < this->position_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontRequest::MergeFrom(const AdFrontRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_info_.MergeFrom(from.position_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_user_agent()) {
      set_user_agent(from.user_agent());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_page_info()) {
      mutable_page_info()->::AdEngineFront::AdFrontRequest_PageInfo::MergeFrom(from.page_info());
    }
    if (from.has_mobile()) {
      mutable_mobile()->::AdEngineFront::AdFrontRequest_Mobile::MergeFrom(from.mobile());
    }
    if (from.has_is_debug()) {
      set_is_debug(from.is_debug());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carousel_random_id()) {
      set_carousel_random_id(from.carousel_random_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontRequest::CopyFrom(const AdFrontRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_page_info()) {
    if (!this->page_info().IsInitialized()) return false;
  }
  for (int i = 0; i < position_info_size(); i++) {
    if (!this->position_info(i).IsInitialized()) return false;
  }
  return true;
}

void AdFrontRequest::Swap(AdFrontRequest* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(ip_, other->ip_);
    std::swap(user_agent_, other->user_agent_);
    std::swap(user_id_, other->user_id_);
    std::swap(page_info_, other->page_info_);
    std::swap(mobile_, other->mobile_);
    position_info_.Swap(&other->position_info_);
    std::swap(is_debug_, other->is_debug_);
    std::swap(carousel_random_id_, other->carousel_random_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontRequest_descriptor_;
  metadata.reflection = AdFrontRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdFrontResponse_UserInfo::kUserAutoBrandFieldNumber;
const int AdFrontResponse_UserInfo::kUserAutoSerieFieldNumber;
const int AdFrontResponse_UserInfo::kUserAutoLevelFieldNumber;
const int AdFrontResponse_UserInfo::kUserAutoPriceFieldNumber;
const int AdFrontResponse_UserInfo::kUserProvinceFieldNumber;
const int AdFrontResponse_UserInfo::kUserCityFieldNumber;
#endif  // !_MSC_VER

AdFrontResponse_UserInfo::AdFrontResponse_UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontResponse_UserInfo::InitAsDefaultInstance() {
}

AdFrontResponse_UserInfo::AdFrontResponse_UserInfo(const AdFrontResponse_UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontResponse_UserInfo::SharedCtor() {
  _cached_size_ = 0;
  user_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontResponse_UserInfo::~AdFrontResponse_UserInfo() {
  SharedDtor();
}

void AdFrontResponse_UserInfo::SharedDtor() {
  if (user_province_ != &::google::protobuf::internal::kEmptyString) {
    delete user_province_;
  }
  if (user_city_ != &::google::protobuf::internal::kEmptyString) {
    delete user_city_;
  }
  if (this != default_instance_) {
  }
}

void AdFrontResponse_UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontResponse_UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontResponse_UserInfo_descriptor_;
}

const AdFrontResponse_UserInfo& AdFrontResponse_UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontResponse_UserInfo* AdFrontResponse_UserInfo::default_instance_ = NULL;

AdFrontResponse_UserInfo* AdFrontResponse_UserInfo::New() const {
  return new AdFrontResponse_UserInfo;
}

void AdFrontResponse_UserInfo::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (has_user_province()) {
      if (user_province_ != &::google::protobuf::internal::kEmptyString) {
        user_province_->clear();
      }
    }
    if (has_user_city()) {
      if (user_city_ != &::google::protobuf::internal::kEmptyString) {
        user_city_->clear();
      }
    }
  }
  user_auto_brand_.Clear();
  user_auto_serie_.Clear();
  user_auto_level_.Clear();
  user_auto_price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontResponse_UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string user_auto_brand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_brand(this->user_auto_brand_size() - 1).data(),
            this->user_auto_brand(this->user_auto_brand_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_user_auto_brand;
        if (input->ExpectTag(18)) goto parse_user_auto_level;
        break;
      }

      // repeated string user_auto_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_level(this->user_auto_level_size() - 1).data(),
            this->user_auto_level(this->user_auto_level_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_auto_level;
        if (input->ExpectTag(26)) goto parse_user_auto_price;
        break;
      }

      // repeated string user_auto_price = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_price(this->user_auto_price_size() - 1).data(),
            this->user_auto_price(this->user_auto_price_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user_auto_price;
        if (input->ExpectTag(34)) goto parse_user_province;
        break;
      }

      // optional string user_province = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_province().data(), this->user_province().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user_city;
        break;
      }

      // optional string user_city = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_city().data(), this->user_city().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_auto_serie;
        break;
      }

      // repeated string user_auto_serie = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_serie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_serie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_serie(this->user_auto_serie_size() - 1).data(),
            this->user_auto_serie(this->user_auto_serie_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_user_auto_serie;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontResponse_UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string user_auto_brand = 1;
  for (int i = 0; i < this->user_auto_brand_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_brand(i).data(), this->user_auto_brand(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user_auto_brand(i), output);
  }

  // repeated string user_auto_level = 2;
  for (int i = 0; i < this->user_auto_level_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_level(i).data(), this->user_auto_level(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user_auto_level(i), output);
  }

  // repeated string user_auto_price = 3;
  for (int i = 0; i < this->user_auto_price_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_price(i).data(), this->user_auto_price(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user_auto_price(i), output);
  }

  // optional string user_province = 4;
  if (has_user_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_province().data(), this->user_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user_province(), output);
  }

  // optional string user_city = 5;
  if (has_user_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_city().data(), this->user_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user_city(), output);
  }

  // repeated string user_auto_serie = 7;
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_serie(i).data(), this->user_auto_serie(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->user_auto_serie(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontResponse_UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string user_auto_brand = 1;
  for (int i = 0; i < this->user_auto_brand_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_brand(i).data(), this->user_auto_brand(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->user_auto_brand(i), target);
  }

  // repeated string user_auto_level = 2;
  for (int i = 0; i < this->user_auto_level_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_level(i).data(), this->user_auto_level(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->user_auto_level(i), target);
  }

  // repeated string user_auto_price = 3;
  for (int i = 0; i < this->user_auto_price_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_price(i).data(), this->user_auto_price(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->user_auto_price(i), target);
  }

  // optional string user_province = 4;
  if (has_user_province()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_province().data(), this->user_province().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user_province(), target);
  }

  // optional string user_city = 5;
  if (has_user_city()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_city().data(), this->user_city().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user_city(), target);
  }

  // repeated string user_auto_serie = 7;
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_serie(i).data(), this->user_auto_serie(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->user_auto_serie(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontResponse_UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional string user_province = 4;
    if (has_user_province()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_province());
    }

    // optional string user_city = 5;
    if (has_user_city()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_city());
    }

  }
  // repeated string user_auto_brand = 1;
  total_size += 1 * this->user_auto_brand_size();
  for (int i = 0; i < this->user_auto_brand_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_brand(i));
  }

  // repeated string user_auto_serie = 7;
  total_size += 1 * this->user_auto_serie_size();
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_serie(i));
  }

  // repeated string user_auto_level = 2;
  total_size += 1 * this->user_auto_level_size();
  for (int i = 0; i < this->user_auto_level_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_level(i));
  }

  // repeated string user_auto_price = 3;
  total_size += 1 * this->user_auto_price_size();
  for (int i = 0; i < this->user_auto_price_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_price(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontResponse_UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontResponse_UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontResponse_UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontResponse_UserInfo::MergeFrom(const AdFrontResponse_UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_auto_brand_.MergeFrom(from.user_auto_brand_);
  user_auto_serie_.MergeFrom(from.user_auto_serie_);
  user_auto_level_.MergeFrom(from.user_auto_level_);
  user_auto_price_.MergeFrom(from.user_auto_price_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_user_province()) {
      set_user_province(from.user_province());
    }
    if (from.has_user_city()) {
      set_user_city(from.user_city());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontResponse_UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontResponse_UserInfo::CopyFrom(const AdFrontResponse_UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontResponse_UserInfo::IsInitialized() const {

  return true;
}

void AdFrontResponse_UserInfo::Swap(AdFrontResponse_UserInfo* other) {
  if (other != this) {
    user_auto_brand_.Swap(&other->user_auto_brand_);
    user_auto_serie_.Swap(&other->user_auto_serie_);
    user_auto_level_.Swap(&other->user_auto_level_);
    user_auto_price_.Swap(&other->user_auto_price_);
    std::swap(user_province_, other->user_province_);
    std::swap(user_city_, other->user_city_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontResponse_UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontResponse_UserInfo_descriptor_;
  metadata.reflection = AdFrontResponse_UserInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kMobilePlatformFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kMobileConnectionTypeFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageDeliveryHourFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageProvinceFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageCityFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageAutoBrandFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageAutoSerieFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kPageAutoLevelFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kUserAutoSerieFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kUserAutoLevelFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::kUserAutoPriceFieldNumber;
#endif  // !_MSC_VER

AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::InitAsDefaultInstance() {
}

AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::~AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget() {
  SharedDtor();
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_;
}

const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance_ = NULL;

AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::New() const {
  return new AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget;
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::Clear() {
  mobile_platform_.Clear();
  mobile_connection_type_.Clear();
  page_delivery_hour_.Clear();
  page_province_.Clear();
  page_city_.Clear();
  page_auto_brand_.Clear();
  page_auto_serie_.Clear();
  page_auto_level_.Clear();
  user_auto_serie_.Clear();
  user_auto_level_.Clear();
  user_auto_price_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string mobile_platform = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_platform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mobile_platform()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_platform(this->mobile_platform_size() - 1).data(),
            this->mobile_platform(this->mobile_platform_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mobile_platform;
        if (input->ExpectTag(18)) goto parse_mobile_connection_type;
        break;
      }

      // repeated string mobile_connection_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mobile_connection_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_mobile_connection_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mobile_connection_type(this->mobile_connection_type_size() - 1).data(),
            this->mobile_connection_type(this->mobile_connection_type_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mobile_connection_type;
        if (input->ExpectTag(26)) goto parse_page_delivery_hour;
        break;
      }

      // repeated string page_delivery_hour = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_delivery_hour:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_delivery_hour()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_delivery_hour(this->page_delivery_hour_size() - 1).data(),
            this->page_delivery_hour(this->page_delivery_hour_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_page_delivery_hour;
        if (input->ExpectTag(34)) goto parse_page_province;
        break;
      }

      // repeated string page_province = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_province:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_province()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_province(this->page_province_size() - 1).data(),
            this->page_province(this->page_province_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_page_province;
        if (input->ExpectTag(42)) goto parse_page_city;
        break;
      }

      // repeated string page_city = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_city:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_city()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_city(this->page_city_size() - 1).data(),
            this->page_city(this->page_city_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_page_city;
        if (input->ExpectTag(50)) goto parse_page_auto_brand;
        break;
      }

      // repeated string page_auto_brand = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_brand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_brand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_brand(this->page_auto_brand_size() - 1).data(),
            this->page_auto_brand(this->page_auto_brand_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_page_auto_brand;
        if (input->ExpectTag(58)) goto parse_page_auto_serie;
        break;
      }

      // repeated string page_auto_serie = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_serie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_serie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_serie(this->page_auto_serie_size() - 1).data(),
            this->page_auto_serie(this->page_auto_serie_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_page_auto_serie;
        if (input->ExpectTag(66)) goto parse_page_auto_level;
        break;
      }

      // repeated string page_auto_level = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_page_auto_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_page_auto_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->page_auto_level(this->page_auto_level_size() - 1).data(),
            this->page_auto_level(this->page_auto_level_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_page_auto_level;
        if (input->ExpectTag(82)) goto parse_user_auto_serie;
        break;
      }

      // repeated string user_auto_serie = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_serie:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_serie()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_serie(this->user_auto_serie_size() - 1).data(),
            this->user_auto_serie(this->user_auto_serie_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_user_auto_serie;
        if (input->ExpectTag(90)) goto parse_user_auto_level;
        break;
      }

      // repeated string user_auto_level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_level:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_level()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_level(this->user_auto_level_size() - 1).data(),
            this->user_auto_level(this->user_auto_level_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_user_auto_level;
        if (input->ExpectTag(98)) goto parse_user_auto_price;
        break;
      }

      // repeated string user_auto_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_auto_price:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user_auto_price()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user_auto_price(this->user_auto_price_size() - 1).data(),
            this->user_auto_price(this->user_auto_price_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_user_auto_price;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string mobile_platform = 1;
  for (int i = 0; i < this->mobile_platform_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mobile_platform(i).data(), this->mobile_platform(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->mobile_platform(i), output);
  }

  // repeated string mobile_connection_type = 2;
  for (int i = 0; i < this->mobile_connection_type_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->mobile_connection_type(i).data(), this->mobile_connection_type(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->mobile_connection_type(i), output);
  }

  // repeated string page_delivery_hour = 3;
  for (int i = 0; i < this->page_delivery_hour_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_delivery_hour(i).data(), this->page_delivery_hour(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->page_delivery_hour(i), output);
  }

  // repeated string page_province = 4;
  for (int i = 0; i < this->page_province_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_province(i).data(), this->page_province(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->page_province(i), output);
  }

  // repeated string page_city = 5;
  for (int i = 0; i < this->page_city_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_city(i).data(), this->page_city(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->page_city(i), output);
  }

  // repeated string page_auto_brand = 6;
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_brand(i).data(), this->page_auto_brand(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->page_auto_brand(i), output);
  }

  // repeated string page_auto_serie = 7;
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_serie(i).data(), this->page_auto_serie(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->page_auto_serie(i), output);
  }

  // repeated string page_auto_level = 8;
  for (int i = 0; i < this->page_auto_level_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->page_auto_level(i).data(), this->page_auto_level(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->page_auto_level(i), output);
  }

  // repeated string user_auto_serie = 10;
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_serie(i).data(), this->user_auto_serie(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->user_auto_serie(i), output);
  }

  // repeated string user_auto_level = 11;
  for (int i = 0; i < this->user_auto_level_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_level(i).data(), this->user_auto_level(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->user_auto_level(i), output);
  }

  // repeated string user_auto_price = 12;
  for (int i = 0; i < this->user_auto_price_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user_auto_price(i).data(), this->user_auto_price(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->user_auto_price(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string mobile_platform = 1;
  for (int i = 0; i < this->mobile_platform_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_platform(i).data(), this->mobile_platform(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->mobile_platform(i), target);
  }

  // repeated string mobile_connection_type = 2;
  for (int i = 0; i < this->mobile_connection_type_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mobile_connection_type(i).data(), this->mobile_connection_type(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->mobile_connection_type(i), target);
  }

  // repeated string page_delivery_hour = 3;
  for (int i = 0; i < this->page_delivery_hour_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_delivery_hour(i).data(), this->page_delivery_hour(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->page_delivery_hour(i), target);
  }

  // repeated string page_province = 4;
  for (int i = 0; i < this->page_province_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_province(i).data(), this->page_province(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->page_province(i), target);
  }

  // repeated string page_city = 5;
  for (int i = 0; i < this->page_city_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_city(i).data(), this->page_city(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->page_city(i), target);
  }

  // repeated string page_auto_brand = 6;
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_brand(i).data(), this->page_auto_brand(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->page_auto_brand(i), target);
  }

  // repeated string page_auto_serie = 7;
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_serie(i).data(), this->page_auto_serie(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->page_auto_serie(i), target);
  }

  // repeated string page_auto_level = 8;
  for (int i = 0; i < this->page_auto_level_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->page_auto_level(i).data(), this->page_auto_level(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->page_auto_level(i), target);
  }

  // repeated string user_auto_serie = 10;
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_serie(i).data(), this->user_auto_serie(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->user_auto_serie(i), target);
  }

  // repeated string user_auto_level = 11;
  for (int i = 0; i < this->user_auto_level_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_level(i).data(), this->user_auto_level(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->user_auto_level(i), target);
  }

  // repeated string user_auto_price = 12;
  for (int i = 0; i < this->user_auto_price_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user_auto_price(i).data(), this->user_auto_price(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->user_auto_price(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::ByteSize() const {
  int total_size = 0;

  // repeated string mobile_platform = 1;
  total_size += 1 * this->mobile_platform_size();
  for (int i = 0; i < this->mobile_platform_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mobile_platform(i));
  }

  // repeated string mobile_connection_type = 2;
  total_size += 1 * this->mobile_connection_type_size();
  for (int i = 0; i < this->mobile_connection_type_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->mobile_connection_type(i));
  }

  // repeated string page_delivery_hour = 3;
  total_size += 1 * this->page_delivery_hour_size();
  for (int i = 0; i < this->page_delivery_hour_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_delivery_hour(i));
  }

  // repeated string page_province = 4;
  total_size += 1 * this->page_province_size();
  for (int i = 0; i < this->page_province_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_province(i));
  }

  // repeated string page_city = 5;
  total_size += 1 * this->page_city_size();
  for (int i = 0; i < this->page_city_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_city(i));
  }

  // repeated string page_auto_brand = 6;
  total_size += 1 * this->page_auto_brand_size();
  for (int i = 0; i < this->page_auto_brand_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_brand(i));
  }

  // repeated string page_auto_serie = 7;
  total_size += 1 * this->page_auto_serie_size();
  for (int i = 0; i < this->page_auto_serie_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_serie(i));
  }

  // repeated string page_auto_level = 8;
  total_size += 1 * this->page_auto_level_size();
  for (int i = 0; i < this->page_auto_level_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->page_auto_level(i));
  }

  // repeated string user_auto_serie = 10;
  total_size += 1 * this->user_auto_serie_size();
  for (int i = 0; i < this->user_auto_serie_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_serie(i));
  }

  // repeated string user_auto_level = 11;
  total_size += 1 * this->user_auto_level_size();
  for (int i = 0; i < this->user_auto_level_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_level(i));
  }

  // repeated string user_auto_price = 12;
  total_size += 1 * this->user_auto_price_size();
  for (int i = 0; i < this->user_auto_price_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user_auto_price(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::MergeFrom(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from) {
  GOOGLE_CHECK_NE(&from, this);
  mobile_platform_.MergeFrom(from.mobile_platform_);
  mobile_connection_type_.MergeFrom(from.mobile_connection_type_);
  page_delivery_hour_.MergeFrom(from.page_delivery_hour_);
  page_province_.MergeFrom(from.page_province_);
  page_city_.MergeFrom(from.page_city_);
  page_auto_brand_.MergeFrom(from.page_auto_brand_);
  page_auto_serie_.MergeFrom(from.page_auto_serie_);
  page_auto_level_.MergeFrom(from.page_auto_level_);
  user_auto_serie_.MergeFrom(from.user_auto_serie_);
  user_auto_level_.MergeFrom(from.user_auto_level_);
  user_auto_price_.MergeFrom(from.user_auto_price_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::CopyFrom(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::IsInitialized() const {

  return true;
}

void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::Swap(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* other) {
  if (other != this) {
    mobile_platform_.Swap(&other->mobile_platform_);
    mobile_connection_type_.Swap(&other->mobile_connection_type_);
    page_delivery_hour_.Swap(&other->page_delivery_hour_);
    page_province_.Swap(&other->page_province_);
    page_city_.Swap(&other->page_city_);
    page_auto_brand_.Swap(&other->page_auto_brand_);
    page_auto_serie_.Swap(&other->page_auto_serie_);
    page_auto_level_.Swap(&other->page_auto_level_);
    user_auto_serie_.Swap(&other->user_auto_serie_);
    user_auto_level_.Swap(&other->user_auto_level_);
    user_auto_price_.Swap(&other->user_auto_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_descriptor_;
  metadata.reflection = AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeIdFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeTypeFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeSizeFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kWidthHeightFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kWordChainLenFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kSellModelFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kIsInternalFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kOrderIdFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCampaignIdFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kGroupIdFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeTargetFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeHtmlFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeEcpmFieldNumber;
const int AdFrontResponse_PositionInfo_CreativeInfo::kCreativeColumnFieldNumber;
#endif  // !_MSC_VER

AdFrontResponse_PositionInfo_CreativeInfo::AdFrontResponse_PositionInfo_CreativeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontResponse_PositionInfo_CreativeInfo::InitAsDefaultInstance() {
  creative_target_ = const_cast< ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget*>(&::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::default_instance());
}

AdFrontResponse_PositionInfo_CreativeInfo::AdFrontResponse_PositionInfo_CreativeInfo(const AdFrontResponse_PositionInfo_CreativeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo_CreativeInfo::SharedCtor() {
  _cached_size_ = 0;
  creative_id_ = GOOGLE_ULONGLONG(0);
  creative_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  word_chain_len_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sell_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_internal_ = false;
  order_id_ = GOOGLE_ULONGLONG(0);
  campaign_id_ = GOOGLE_ULONGLONG(0);
  group_id_ = GOOGLE_ULONGLONG(0);
  creative_target_ = NULL;
  creative_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_ecpm_ = 0;
  creative_column_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontResponse_PositionInfo_CreativeInfo::~AdFrontResponse_PositionInfo_CreativeInfo() {
  SharedDtor();
}

void AdFrontResponse_PositionInfo_CreativeInfo::SharedDtor() {
  if (creative_type_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_type_;
  }
  if (creative_size_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_size_;
  }
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    delete width_height_;
  }
  if (word_chain_len_ != &::google::protobuf::internal::kEmptyString) {
    delete word_chain_len_;
  }
  if (sell_model_ != &::google::protobuf::internal::kEmptyString) {
    delete sell_model_;
  }
  if (creative_html_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_html_;
  }
  if (this != default_instance_) {
    delete creative_target_;
  }
}

void AdFrontResponse_PositionInfo_CreativeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo_CreativeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontResponse_PositionInfo_CreativeInfo_descriptor_;
}

const AdFrontResponse_PositionInfo_CreativeInfo& AdFrontResponse_PositionInfo_CreativeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontResponse_PositionInfo_CreativeInfo* AdFrontResponse_PositionInfo_CreativeInfo::default_instance_ = NULL;

AdFrontResponse_PositionInfo_CreativeInfo* AdFrontResponse_PositionInfo_CreativeInfo::New() const {
  return new AdFrontResponse_PositionInfo_CreativeInfo;
}

void AdFrontResponse_PositionInfo_CreativeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    creative_id_ = GOOGLE_ULONGLONG(0);
    if (has_creative_type()) {
      if (creative_type_ != &::google::protobuf::internal::kEmptyString) {
        creative_type_->clear();
      }
    }
    if (has_creative_size()) {
      if (creative_size_ != &::google::protobuf::internal::kEmptyString) {
        creative_size_->clear();
      }
    }
    if (has_width_height()) {
      if (width_height_ != &::google::protobuf::internal::kEmptyString) {
        width_height_->clear();
      }
    }
    if (has_word_chain_len()) {
      if (word_chain_len_ != &::google::protobuf::internal::kEmptyString) {
        word_chain_len_->clear();
      }
    }
    if (has_sell_model()) {
      if (sell_model_ != &::google::protobuf::internal::kEmptyString) {
        sell_model_->clear();
      }
    }
    is_internal_ = false;
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    campaign_id_ = GOOGLE_ULONGLONG(0);
    group_id_ = GOOGLE_ULONGLONG(0);
    if (has_creative_target()) {
      if (creative_target_ != NULL) creative_target_->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::Clear();
    }
    if (has_creative_html()) {
      if (creative_html_ != &::google::protobuf::internal::kEmptyString) {
        creative_html_->clear();
      }
    }
    creative_ecpm_ = 0;
    creative_column_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontResponse_PositionInfo_CreativeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 creative_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creative_id_)));
          set_has_creative_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_creative_type;
        break;
      }

      // optional string creative_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_type().data(), this->creative_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_creative_size;
        break;
      }

      // optional string creative_size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_size:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_size()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_size().data(), this->creative_size().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_width_height;
        break;
      }

      // optional string width_height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_width_height:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_width_height()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->width_height().data(), this->width_height().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_word_chain_len;
        break;
      }

      // optional string word_chain_len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word_chain_len:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_word_chain_len()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->word_chain_len().data(), this->word_chain_len().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sell_model;
        break;
      }

      // optional string sell_model = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sell_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sell_model().data(), this->sell_model().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_internal;
        break;
      }

      // optional bool is_internal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_internal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_internal_)));
          set_has_is_internal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_order_id;
        break;
      }

      // optional uint64 order_id = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_campaign_id;
        break;
      }

      // optional uint64 campaign_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campaign_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &campaign_id_)));
          set_has_campaign_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_group_id;
        break;
      }

      // optional uint64 group_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
          set_has_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_creative_target;
        break;
      }

      // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creative_target()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_creative_html;
        break;
      }

      // optional string creative_html = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_html:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creative_html()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creative_html().data(), this->creative_html().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_creative_ecpm;
        break;
      }

      // optional float creative_ecpm = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_creative_ecpm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creative_ecpm_)));
          set_has_creative_ecpm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_creative_column;
        break;
      }

      // optional uint64 creative_column = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_creative_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &creative_column_)));
          set_has_creative_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontResponse_PositionInfo_CreativeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 creative_id = 1;
  if (has_creative_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->creative_id(), output);
  }

  // optional string creative_type = 2;
  if (has_creative_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_type().data(), this->creative_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->creative_type(), output);
  }

  // optional string creative_size = 3;
  if (has_creative_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_size().data(), this->creative_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->creative_size(), output);
  }

  // optional string width_height = 4;
  if (has_width_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->width_height().data(), this->width_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->width_height(), output);
  }

  // optional string word_chain_len = 5;
  if (has_word_chain_len()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_chain_len().data(), this->word_chain_len().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->word_chain_len(), output);
  }

  // optional string sell_model = 6;
  if (has_sell_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sell_model().data(), this->sell_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sell_model(), output);
  }

  // optional bool is_internal = 7;
  if (has_is_internal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_internal(), output);
  }

  // optional uint64 order_id = 8;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->order_id(), output);
  }

  // optional uint64 campaign_id = 9;
  if (has_campaign_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->campaign_id(), output);
  }

  // optional uint64 group_id = 10;
  if (has_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->group_id(), output);
  }

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
  if (has_creative_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->creative_target(), output);
  }

  // optional string creative_html = 12;
  if (has_creative_html()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_html().data(), this->creative_html().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->creative_html(), output);
  }

  // optional float creative_ecpm = 13;
  if (has_creative_ecpm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->creative_ecpm(), output);
  }

  // optional uint64 creative_column = 14;
  if (has_creative_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->creative_column(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontResponse_PositionInfo_CreativeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 creative_id = 1;
  if (has_creative_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->creative_id(), target);
  }

  // optional string creative_type = 2;
  if (has_creative_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_type().data(), this->creative_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->creative_type(), target);
  }

  // optional string creative_size = 3;
  if (has_creative_size()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_size().data(), this->creative_size().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->creative_size(), target);
  }

  // optional string width_height = 4;
  if (has_width_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->width_height().data(), this->width_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->width_height(), target);
  }

  // optional string word_chain_len = 5;
  if (has_word_chain_len()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->word_chain_len().data(), this->word_chain_len().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->word_chain_len(), target);
  }

  // optional string sell_model = 6;
  if (has_sell_model()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sell_model().data(), this->sell_model().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sell_model(), target);
  }

  // optional bool is_internal = 7;
  if (has_is_internal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_internal(), target);
  }

  // optional uint64 order_id = 8;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->order_id(), target);
  }

  // optional uint64 campaign_id = 9;
  if (has_campaign_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->campaign_id(), target);
  }

  // optional uint64 group_id = 10;
  if (has_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->group_id(), target);
  }

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
  if (has_creative_target()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->creative_target(), target);
  }

  // optional string creative_html = 12;
  if (has_creative_html()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creative_html().data(), this->creative_html().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->creative_html(), target);
  }

  // optional float creative_ecpm = 13;
  if (has_creative_ecpm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->creative_ecpm(), target);
  }

  // optional uint64 creative_column = 14;
  if (has_creative_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->creative_column(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontResponse_PositionInfo_CreativeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 creative_id = 1;
    if (has_creative_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creative_id());
    }

    // optional string creative_type = 2;
    if (has_creative_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_type());
    }

    // optional string creative_size = 3;
    if (has_creative_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_size());
    }

    // optional string width_height = 4;
    if (has_width_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->width_height());
    }

    // optional string word_chain_len = 5;
    if (has_word_chain_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->word_chain_len());
    }

    // optional string sell_model = 6;
    if (has_sell_model()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sell_model());
    }

    // optional bool is_internal = 7;
    if (has_is_internal()) {
      total_size += 1 + 1;
    }

    // optional uint64 order_id = 8;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 campaign_id = 9;
    if (has_campaign_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->campaign_id());
    }

    // optional uint64 group_id = 10;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
    if (has_creative_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creative_target());
    }

    // optional string creative_html = 12;
    if (has_creative_html()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creative_html());
    }

    // optional float creative_ecpm = 13;
    if (has_creative_ecpm()) {
      total_size += 1 + 4;
    }

    // optional uint64 creative_column = 14;
    if (has_creative_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->creative_column());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontResponse_PositionInfo_CreativeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontResponse_PositionInfo_CreativeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontResponse_PositionInfo_CreativeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontResponse_PositionInfo_CreativeInfo::MergeFrom(const AdFrontResponse_PositionInfo_CreativeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creative_id()) {
      set_creative_id(from.creative_id());
    }
    if (from.has_creative_type()) {
      set_creative_type(from.creative_type());
    }
    if (from.has_creative_size()) {
      set_creative_size(from.creative_size());
    }
    if (from.has_width_height()) {
      set_width_height(from.width_height());
    }
    if (from.has_word_chain_len()) {
      set_word_chain_len(from.word_chain_len());
    }
    if (from.has_sell_model()) {
      set_sell_model(from.sell_model());
    }
    if (from.has_is_internal()) {
      set_is_internal(from.is_internal());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_campaign_id()) {
      set_campaign_id(from.campaign_id());
    }
    if (from.has_group_id()) {
      set_group_id(from.group_id());
    }
    if (from.has_creative_target()) {
      mutable_creative_target()->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::MergeFrom(from.creative_target());
    }
    if (from.has_creative_html()) {
      set_creative_html(from.creative_html());
    }
    if (from.has_creative_ecpm()) {
      set_creative_ecpm(from.creative_ecpm());
    }
    if (from.has_creative_column()) {
      set_creative_column(from.creative_column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontResponse_PositionInfo_CreativeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo_CreativeInfo::CopyFrom(const AdFrontResponse_PositionInfo_CreativeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontResponse_PositionInfo_CreativeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AdFrontResponse_PositionInfo_CreativeInfo::Swap(AdFrontResponse_PositionInfo_CreativeInfo* other) {
  if (other != this) {
    std::swap(creative_id_, other->creative_id_);
    std::swap(creative_type_, other->creative_type_);
    std::swap(creative_size_, other->creative_size_);
    std::swap(width_height_, other->width_height_);
    std::swap(word_chain_len_, other->word_chain_len_);
    std::swap(sell_model_, other->sell_model_);
    std::swap(is_internal_, other->is_internal_);
    std::swap(order_id_, other->order_id_);
    std::swap(campaign_id_, other->campaign_id_);
    std::swap(group_id_, other->group_id_);
    std::swap(creative_target_, other->creative_target_);
    std::swap(creative_html_, other->creative_html_);
    std::swap(creative_ecpm_, other->creative_ecpm_);
    std::swap(creative_column_, other->creative_column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontResponse_PositionInfo_CreativeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontResponse_PositionInfo_CreativeInfo_descriptor_;
  metadata.reflection = AdFrontResponse_PositionInfo_CreativeInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontResponse_PositionInfo::kPositionIdFieldNumber;
const int AdFrontResponse_PositionInfo::kPvIdFieldNumber;
const int AdFrontResponse_PositionInfo::kSellModelFieldNumber;
const int AdFrontResponse_PositionInfo::kCreativeInfoFieldNumber;
const int AdFrontResponse_PositionInfo::kRequestPathFieldNumber;
const int AdFrontResponse_PositionInfo::kRankPathFieldNumber;
const int AdFrontResponse_PositionInfo::kPositionLabelFieldNumber;
const int AdFrontResponse_PositionInfo::kCarouselidFieldNumber;
const int AdFrontResponse_PositionInfo::kAlgoDetailFieldNumber;
const int AdFrontResponse_PositionInfo::kWidthHeightFieldNumber;
#endif  // !_MSC_VER

AdFrontResponse_PositionInfo::AdFrontResponse_PositionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontResponse_PositionInfo::InitAsDefaultInstance() {
  creative_info_ = const_cast< ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo*>(&::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo::default_instance());
}

AdFrontResponse_PositionInfo::AdFrontResponse_PositionInfo(const AdFrontResponse_PositionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo::SharedCtor() {
  _cached_size_ = 0;
  position_id_ = GOOGLE_ULONGLONG(0);
  pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  creative_info_ = NULL;
  request_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rank_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  position_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carouselid_ = GOOGLE_ULONGLONG(0);
  algo_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontResponse_PositionInfo::~AdFrontResponse_PositionInfo() {
  SharedDtor();
}

void AdFrontResponse_PositionInfo::SharedDtor() {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pv_id_;
  }
  if (request_path_ != &::google::protobuf::internal::kEmptyString) {
    delete request_path_;
  }
  if (rank_path_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_path_;
  }
  if (position_label_ != &::google::protobuf::internal::kEmptyString) {
    delete position_label_;
  }
  if (algo_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete algo_detail_;
  }
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    delete width_height_;
  }
  if (this != default_instance_) {
    delete creative_info_;
  }
}

void AdFrontResponse_PositionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontResponse_PositionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontResponse_PositionInfo_descriptor_;
}

const AdFrontResponse_PositionInfo& AdFrontResponse_PositionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontResponse_PositionInfo* AdFrontResponse_PositionInfo::default_instance_ = NULL;

AdFrontResponse_PositionInfo* AdFrontResponse_PositionInfo::New() const {
  return new AdFrontResponse_PositionInfo;
}

void AdFrontResponse_PositionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_id_ = GOOGLE_ULONGLONG(0);
    if (has_pv_id()) {
      if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
        pv_id_->clear();
      }
    }
    if (has_creative_info()) {
      if (creative_info_ != NULL) creative_info_->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo::Clear();
    }
    if (has_request_path()) {
      if (request_path_ != &::google::protobuf::internal::kEmptyString) {
        request_path_->clear();
      }
    }
    if (has_rank_path()) {
      if (rank_path_ != &::google::protobuf::internal::kEmptyString) {
        rank_path_->clear();
      }
    }
    if (has_position_label()) {
      if (position_label_ != &::google::protobuf::internal::kEmptyString) {
        position_label_->clear();
      }
    }
    carouselid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_algo_detail()) {
      if (algo_detail_ != &::google::protobuf::internal::kEmptyString) {
        algo_detail_->clear();
      }
    }
    if (has_width_height()) {
      if (width_height_ != &::google::protobuf::internal::kEmptyString) {
        width_height_->clear();
      }
    }
  }
  sell_model_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontResponse_PositionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 position_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_id_)));
          set_has_position_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pv_id;
        break;
      }

      // optional string pv_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pv_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pv_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pv_id().data(), this->pv_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sell_model;
        break;
      }

      // repeated string sell_model = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sell_model:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_sell_model()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sell_model(this->sell_model_size() - 1).data(),
            this->sell_model(this->sell_model_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sell_model;
        if (input->ExpectTag(34)) goto parse_creative_info;
        break;
      }

      // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_creative_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_creative_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_request_path;
        break;
      }

      // optional string request_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_request_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_path().data(), this->request_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rank_path;
        break;
      }

      // optional string rank_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rank_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rank_path().data(), this->rank_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_position_label;
        break;
      }

      // optional string position_label = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_label:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_position_label()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->position_label().data(), this->position_label().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_carouselid;
        break;
      }

      // optional uint64 carouselid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_carouselid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &carouselid_)));
          set_has_carouselid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_algo_detail;
        break;
      }

      // optional string algo_detail = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algo_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algo_detail()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algo_detail().data(), this->algo_detail().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_width_height;
        break;
      }

      // optional string width_height = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_width_height:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_width_height()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->width_height().data(), this->width_height().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontResponse_PositionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 position_id = 1;
  if (has_position_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->position_id(), output);
  }

  // optional string pv_id = 2;
  if (has_pv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pv_id().data(), this->pv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->pv_id(), output);
  }

  // repeated string sell_model = 3;
  for (int i = 0; i < this->sell_model_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->sell_model(i).data(), this->sell_model(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sell_model(i), output);
  }

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
  if (has_creative_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->creative_info(), output);
  }

  // optional string request_path = 5;
  if (has_request_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_path().data(), this->request_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->request_path(), output);
  }

  // optional string rank_path = 6;
  if (has_rank_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_path().data(), this->rank_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rank_path(), output);
  }

  // optional string position_label = 7;
  if (has_position_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_label().data(), this->position_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->position_label(), output);
  }

  // optional uint64 carouselid = 8;
  if (has_carouselid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->carouselid(), output);
  }

  // optional string algo_detail = 9;
  if (has_algo_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algo_detail().data(), this->algo_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->algo_detail(), output);
  }

  // optional string width_height = 10;
  if (has_width_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->width_height().data(), this->width_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->width_height(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontResponse_PositionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 position_id = 1;
  if (has_position_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->position_id(), target);
  }

  // optional string pv_id = 2;
  if (has_pv_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pv_id().data(), this->pv_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pv_id(), target);
  }

  // repeated string sell_model = 3;
  for (int i = 0; i < this->sell_model_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sell_model(i).data(), this->sell_model(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->sell_model(i), target);
  }

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
  if (has_creative_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->creative_info(), target);
  }

  // optional string request_path = 5;
  if (has_request_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_path().data(), this->request_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->request_path(), target);
  }

  // optional string rank_path = 6;
  if (has_rank_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rank_path().data(), this->rank_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rank_path(), target);
  }

  // optional string position_label = 7;
  if (has_position_label()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->position_label().data(), this->position_label().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->position_label(), target);
  }

  // optional uint64 carouselid = 8;
  if (has_carouselid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->carouselid(), target);
  }

  // optional string algo_detail = 9;
  if (has_algo_detail()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algo_detail().data(), this->algo_detail().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->algo_detail(), target);
  }

  // optional string width_height = 10;
  if (has_width_height()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->width_height().data(), this->width_height().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->width_height(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontResponse_PositionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 position_id = 1;
    if (has_position_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position_id());
    }

    // optional string pv_id = 2;
    if (has_pv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pv_id());
    }

    // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
    if (has_creative_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->creative_info());
    }

    // optional string request_path = 5;
    if (has_request_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_path());
    }

    // optional string rank_path = 6;
    if (has_rank_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rank_path());
    }

    // optional string position_label = 7;
    if (has_position_label()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->position_label());
    }

    // optional uint64 carouselid = 8;
    if (has_carouselid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->carouselid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string algo_detail = 9;
    if (has_algo_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algo_detail());
    }

    // optional string width_height = 10;
    if (has_width_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->width_height());
    }

  }
  // repeated string sell_model = 3;
  total_size += 1 * this->sell_model_size();
  for (int i = 0; i < this->sell_model_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->sell_model(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontResponse_PositionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontResponse_PositionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontResponse_PositionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontResponse_PositionInfo::MergeFrom(const AdFrontResponse_PositionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  sell_model_.MergeFrom(from.sell_model_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position_id()) {
      set_position_id(from.position_id());
    }
    if (from.has_pv_id()) {
      set_pv_id(from.pv_id());
    }
    if (from.has_creative_info()) {
      mutable_creative_info()->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo::MergeFrom(from.creative_info());
    }
    if (from.has_request_path()) {
      set_request_path(from.request_path());
    }
    if (from.has_rank_path()) {
      set_rank_path(from.rank_path());
    }
    if (from.has_position_label()) {
      set_position_label(from.position_label());
    }
    if (from.has_carouselid()) {
      set_carouselid(from.carouselid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_algo_detail()) {
      set_algo_detail(from.algo_detail());
    }
    if (from.has_width_height()) {
      set_width_height(from.width_height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontResponse_PositionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontResponse_PositionInfo::CopyFrom(const AdFrontResponse_PositionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontResponse_PositionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_creative_info()) {
    if (!this->creative_info().IsInitialized()) return false;
  }
  return true;
}

void AdFrontResponse_PositionInfo::Swap(AdFrontResponse_PositionInfo* other) {
  if (other != this) {
    std::swap(position_id_, other->position_id_);
    std::swap(pv_id_, other->pv_id_);
    sell_model_.Swap(&other->sell_model_);
    std::swap(creative_info_, other->creative_info_);
    std::swap(request_path_, other->request_path_);
    std::swap(rank_path_, other->rank_path_);
    std::swap(position_label_, other->position_label_);
    std::swap(carouselid_, other->carouselid_);
    std::swap(algo_detail_, other->algo_detail_);
    std::swap(width_height_, other->width_height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontResponse_PositionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontResponse_PositionInfo_descriptor_;
  metadata.reflection = AdFrontResponse_PositionInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int AdFrontResponse::kReqIdFieldNumber;
const int AdFrontResponse::kUserInfoFieldNumber;
const int AdFrontResponse::kPositionInfoFieldNumber;
const int AdFrontResponse::kAlgorithmBucketFieldNumber;
const int AdFrontResponse::kProcessingTimeMsFieldNumber;
#endif  // !_MSC_VER

AdFrontResponse::AdFrontResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdFrontResponse::InitAsDefaultInstance() {
  user_info_ = const_cast< ::AdEngineFront::AdFrontResponse_UserInfo*>(&::AdEngineFront::AdFrontResponse_UserInfo::default_instance());
}

AdFrontResponse::AdFrontResponse(const AdFrontResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdFrontResponse::SharedCtor() {
  _cached_size_ = 0;
  req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  user_info_ = NULL;
  algorithm_bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  processing_time_ms_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdFrontResponse::~AdFrontResponse() {
  SharedDtor();
}

void AdFrontResponse::SharedDtor() {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete req_id_;
  }
  if (algorithm_bucket_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithm_bucket_;
  }
  if (this != default_instance_) {
    delete user_info_;
  }
}

void AdFrontResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdFrontResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdFrontResponse_descriptor_;
}

const AdFrontResponse& AdFrontResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_engine_5fadfront_2eproto();
  return *default_instance_;
}

AdFrontResponse* AdFrontResponse::default_instance_ = NULL;

AdFrontResponse* AdFrontResponse::New() const {
  return new AdFrontResponse;
}

void AdFrontResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_req_id()) {
      if (req_id_ != &::google::protobuf::internal::kEmptyString) {
        req_id_->clear();
      }
    }
    if (has_user_info()) {
      if (user_info_ != NULL) user_info_->::AdEngineFront::AdFrontResponse_UserInfo::Clear();
    }
    if (has_algorithm_bucket()) {
      if (algorithm_bucket_ != &::google::protobuf::internal::kEmptyString) {
        algorithm_bucket_->clear();
      }
    }
    processing_time_ms_ = 0;
  }
  position_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdFrontResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string req_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_req_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->req_id().data(), this->req_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user_info;
        break;
      }

      // optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position_info;
        break;
      }

      // repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_position_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_position_info;
        if (input->ExpectTag(34)) goto parse_algorithm_bucket;
        break;
      }

      // optional string algorithm_bucket = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_algorithm_bucket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_algorithm_bucket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->algorithm_bucket().data(), this->algorithm_bucket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_processing_time_ms;
        break;
      }

      // optional int32 processing_time_ms = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_processing_time_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &processing_time_ms_)));
          set_has_processing_time_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdFrontResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_id().data(), this->req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->req_id(), output);
  }

  // optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
  if (has_user_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->user_info(), output);
  }

  // repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
  for (int i = 0; i < this->position_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->position_info(i), output);
  }

  // optional string algorithm_bucket = 4;
  if (has_algorithm_bucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithm_bucket().data(), this->algorithm_bucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->algorithm_bucket(), output);
  }

  // optional int32 processing_time_ms = 5;
  if (has_processing_time_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->processing_time_ms(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdFrontResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string req_id = 1;
  if (has_req_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->req_id().data(), this->req_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->req_id(), target);
  }

  // optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
  if (has_user_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->user_info(), target);
  }

  // repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
  for (int i = 0; i < this->position_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->position_info(i), target);
  }

  // optional string algorithm_bucket = 4;
  if (has_algorithm_bucket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->algorithm_bucket().data(), this->algorithm_bucket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->algorithm_bucket(), target);
  }

  // optional int32 processing_time_ms = 5;
  if (has_processing_time_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->processing_time_ms(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdFrontResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string req_id = 1;
    if (has_req_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->req_id());
    }

    // optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
    if (has_user_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user_info());
    }

    // optional string algorithm_bucket = 4;
    if (has_algorithm_bucket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->algorithm_bucket());
    }

    // optional int32 processing_time_ms = 5;
    if (has_processing_time_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->processing_time_ms());
    }

  }
  // repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
  total_size += 1 * this->position_info_size();
  for (int i = 0; i < this->position_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->position_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdFrontResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdFrontResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdFrontResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdFrontResponse::MergeFrom(const AdFrontResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  position_info_.MergeFrom(from.position_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_req_id()) {
      set_req_id(from.req_id());
    }
    if (from.has_user_info()) {
      mutable_user_info()->::AdEngineFront::AdFrontResponse_UserInfo::MergeFrom(from.user_info());
    }
    if (from.has_algorithm_bucket()) {
      set_algorithm_bucket(from.algorithm_bucket());
    }
    if (from.has_processing_time_ms()) {
      set_processing_time_ms(from.processing_time_ms());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdFrontResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdFrontResponse::CopyFrom(const AdFrontResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdFrontResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < position_info_size(); i++) {
    if (!this->position_info(i).IsInitialized()) return false;
  }
  return true;
}

void AdFrontResponse::Swap(AdFrontResponse* other) {
  if (other != this) {
    std::swap(req_id_, other->req_id_);
    std::swap(user_info_, other->user_info_);
    position_info_.Swap(&other->position_info_);
    std::swap(algorithm_bucket_, other->algorithm_bucket_);
    std::swap(processing_time_ms_, other->processing_time_ms_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdFrontResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdFrontResponse_descriptor_;
  metadata.reflection = AdFrontResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AdEngineFront

// @@protoc_insertion_point(global_scope)
