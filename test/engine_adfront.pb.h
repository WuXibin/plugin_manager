// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: engine_adfront.proto

#ifndef PROTOBUF_engine_5fadfront_2eproto__INCLUDED
#define PROTOBUF_engine_5fadfront_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace AdEngineFront {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_engine_5fadfront_2eproto();
void protobuf_AssignDesc_engine_5fadfront_2eproto();
void protobuf_ShutdownFile_engine_5fadfront_2eproto();

class AdFrontRequest;
class AdFrontRequest_PageInfo;
class AdFrontRequest_Mobile;
class AdFrontRequest_PositionInfo;
class AdFrontResponse;
class AdFrontResponse_UserInfo;
class AdFrontResponse_PositionInfo;
class AdFrontResponse_PositionInfo_CreativeInfo;
class AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget;

// ===================================================================

class AdFrontRequest_PageInfo : public ::google::protobuf::Message {
 public:
  AdFrontRequest_PageInfo();
  virtual ~AdFrontRequest_PageInfo();

  AdFrontRequest_PageInfo(const AdFrontRequest_PageInfo& from);

  inline AdFrontRequest_PageInfo& operator=(const AdFrontRequest_PageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontRequest_PageInfo& default_instance();

  void Swap(AdFrontRequest_PageInfo* other);

  // implements Message ----------------------------------------------

  AdFrontRequest_PageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontRequest_PageInfo& from);
  void MergeFrom(const AdFrontRequest_PageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string page_id = 1;
  inline bool has_page_id() const;
  inline void clear_page_id();
  static const int kPageIdFieldNumber = 1;
  inline const ::std::string& page_id() const;
  inline void set_page_id(const ::std::string& value);
  inline void set_page_id(const char* value);
  inline void set_page_id(const char* value, size_t size);
  inline ::std::string* mutable_page_id();
  inline ::std::string* release_page_id();
  inline void set_allocated_page_id(::std::string* page_id);

  // optional bool is_multiple = 2 [default = true];
  inline bool has_is_multiple() const;
  inline void clear_is_multiple();
  static const int kIsMultipleFieldNumber = 2;
  inline bool is_multiple() const;
  inline void set_is_multiple(bool value);

  // optional string page_province = 3;
  inline bool has_page_province() const;
  inline void clear_page_province();
  static const int kPageProvinceFieldNumber = 3;
  inline const ::std::string& page_province() const;
  inline void set_page_province(const ::std::string& value);
  inline void set_page_province(const char* value);
  inline void set_page_province(const char* value, size_t size);
  inline ::std::string* mutable_page_province();
  inline ::std::string* release_page_province();
  inline void set_allocated_page_province(::std::string* page_province);

  // optional string page_city = 4;
  inline bool has_page_city() const;
  inline void clear_page_city();
  static const int kPageCityFieldNumber = 4;
  inline const ::std::string& page_city() const;
  inline void set_page_city(const ::std::string& value);
  inline void set_page_city(const char* value);
  inline void set_page_city(const char* value, size_t size);
  inline ::std::string* mutable_page_city();
  inline ::std::string* release_page_city();
  inline void set_allocated_page_city(::std::string* page_city);

  // repeated string page_auto_brand = 5;
  inline int page_auto_brand_size() const;
  inline void clear_page_auto_brand();
  static const int kPageAutoBrandFieldNumber = 5;
  inline const ::std::string& page_auto_brand(int index) const;
  inline ::std::string* mutable_page_auto_brand(int index);
  inline void set_page_auto_brand(int index, const ::std::string& value);
  inline void set_page_auto_brand(int index, const char* value);
  inline void set_page_auto_brand(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_brand();
  inline void add_page_auto_brand(const ::std::string& value);
  inline void add_page_auto_brand(const char* value);
  inline void add_page_auto_brand(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_brand() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_brand();

  // repeated string page_auto_serie = 6;
  inline int page_auto_serie_size() const;
  inline void clear_page_auto_serie();
  static const int kPageAutoSerieFieldNumber = 6;
  inline const ::std::string& page_auto_serie(int index) const;
  inline ::std::string* mutable_page_auto_serie(int index);
  inline void set_page_auto_serie(int index, const ::std::string& value);
  inline void set_page_auto_serie(int index, const char* value);
  inline void set_page_auto_serie(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_serie();
  inline void add_page_auto_serie(const ::std::string& value);
  inline void add_page_auto_serie(const char* value);
  inline void add_page_auto_serie(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_serie() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_serie();

  // repeated string page_auto_level = 7;
  inline int page_auto_level_size() const;
  inline void clear_page_auto_level();
  static const int kPageAutoLevelFieldNumber = 7;
  inline const ::std::string& page_auto_level(int index) const;
  inline ::std::string* mutable_page_auto_level(int index);
  inline void set_page_auto_level(int index, const ::std::string& value);
  inline void set_page_auto_level(int index, const char* value);
  inline void set_page_auto_level(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_level();
  inline void add_page_auto_level(const ::std::string& value);
  inline void add_page_auto_level(const char* value);
  inline void add_page_auto_level(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_level() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_level();

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontRequest.PageInfo)
 private:
  inline void set_has_page_id();
  inline void clear_has_page_id();
  inline void set_has_is_multiple();
  inline void clear_has_is_multiple();
  inline void set_has_page_province();
  inline void clear_has_page_province();
  inline void set_has_page_city();
  inline void clear_has_page_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* page_id_;
  ::std::string* page_province_;
  ::std::string* page_city_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_brand_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_serie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_level_;
  bool is_multiple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontRequest_PageInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontRequest_Mobile : public ::google::protobuf::Message {
 public:
  AdFrontRequest_Mobile();
  virtual ~AdFrontRequest_Mobile();

  AdFrontRequest_Mobile(const AdFrontRequest_Mobile& from);

  inline AdFrontRequest_Mobile& operator=(const AdFrontRequest_Mobile& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontRequest_Mobile& default_instance();

  void Swap(AdFrontRequest_Mobile* other);

  // implements Message ----------------------------------------------

  AdFrontRequest_Mobile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontRequest_Mobile& from);
  void MergeFrom(const AdFrontRequest_Mobile& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string platform = 1;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 1;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string brand = 2;
  inline bool has_brand() const;
  inline void clear_brand();
  static const int kBrandFieldNumber = 2;
  inline const ::std::string& brand() const;
  inline void set_brand(const ::std::string& value);
  inline void set_brand(const char* value);
  inline void set_brand(const char* value, size_t size);
  inline ::std::string* mutable_brand();
  inline ::std::string* release_brand();
  inline void set_allocated_brand(::std::string* brand);

  // optional string model = 3;
  inline bool has_model() const;
  inline void clear_model();
  static const int kModelFieldNumber = 3;
  inline const ::std::string& model() const;
  inline void set_model(const ::std::string& value);
  inline void set_model(const char* value);
  inline void set_model(const char* value, size_t size);
  inline ::std::string* mutable_model();
  inline ::std::string* release_model();
  inline void set_allocated_model(::std::string* model);

  // optional string os_version = 4;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 4;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const char* value, size_t size);
  inline ::std::string* mutable_os_version();
  inline ::std::string* release_os_version();
  inline void set_allocated_os_version(::std::string* os_version);

  // optional string connection_type = 5;
  inline bool has_connection_type() const;
  inline void clear_connection_type();
  static const int kConnectionTypeFieldNumber = 5;
  inline const ::std::string& connection_type() const;
  inline void set_connection_type(const ::std::string& value);
  inline void set_connection_type(const char* value);
  inline void set_connection_type(const char* value, size_t size);
  inline ::std::string* mutable_connection_type();
  inline ::std::string* release_connection_type();
  inline void set_allocated_connection_type(::std::string* connection_type);

  // optional bool is_app = 6 [default = false];
  inline bool has_is_app() const;
  inline void clear_is_app();
  static const int kIsAppFieldNumber = 6;
  inline bool is_app() const;
  inline void set_is_app(bool value);

  // optional int32 latitude = 7;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 7;
  inline ::google::protobuf::int32 latitude() const;
  inline void set_latitude(::google::protobuf::int32 value);

  // optional int32 longitude = 8;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 8;
  inline ::google::protobuf::int32 longitude() const;
  inline void set_longitude(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontRequest.Mobile)
 private:
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_brand();
  inline void clear_has_brand();
  inline void set_has_model();
  inline void clear_has_model();
  inline void set_has_os_version();
  inline void clear_has_os_version();
  inline void set_has_connection_type();
  inline void clear_has_connection_type();
  inline void set_has_is_app();
  inline void clear_has_is_app();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* platform_;
  ::std::string* brand_;
  ::std::string* model_;
  ::std::string* os_version_;
  ::std::string* connection_type_;
  bool is_app_;
  ::google::protobuf::int32 latitude_;
  ::google::protobuf::int32 longitude_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontRequest_Mobile* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontRequest_PositionInfo : public ::google::protobuf::Message {
 public:
  AdFrontRequest_PositionInfo();
  virtual ~AdFrontRequest_PositionInfo();

  AdFrontRequest_PositionInfo(const AdFrontRequest_PositionInfo& from);

  inline AdFrontRequest_PositionInfo& operator=(const AdFrontRequest_PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontRequest_PositionInfo& default_instance();

  void Swap(AdFrontRequest_PositionInfo* other);

  // implements Message ----------------------------------------------

  AdFrontRequest_PositionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontRequest_PositionInfo& from);
  void MergeFrom(const AdFrontRequest_PositionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 position_id = 1;
  inline bool has_position_id() const;
  inline void clear_position_id();
  static const int kPositionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 position_id() const;
  inline void set_position_id(::google::protobuf::uint64 value);

  // optional string pv_id = 2;
  inline bool has_pv_id() const;
  inline void clear_pv_id();
  static const int kPvIdFieldNumber = 2;
  inline const ::std::string& pv_id() const;
  inline void set_pv_id(const ::std::string& value);
  inline void set_pv_id(const char* value);
  inline void set_pv_id(const char* value, size_t size);
  inline ::std::string* mutable_pv_id();
  inline ::std::string* release_pv_id();
  inline void set_allocated_pv_id(::std::string* pv_id);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontRequest.PositionInfo)
 private:
  inline void set_has_position_id();
  inline void clear_has_position_id();
  inline void set_has_pv_id();
  inline void clear_has_pv_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 position_id_;
  ::std::string* pv_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontRequest_PositionInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontRequest : public ::google::protobuf::Message {
 public:
  AdFrontRequest();
  virtual ~AdFrontRequest();

  AdFrontRequest(const AdFrontRequest& from);

  inline AdFrontRequest& operator=(const AdFrontRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontRequest& default_instance();

  void Swap(AdFrontRequest* other);

  // implements Message ----------------------------------------------

  AdFrontRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontRequest& from);
  void MergeFrom(const AdFrontRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdFrontRequest_PageInfo PageInfo;
  typedef AdFrontRequest_Mobile Mobile;
  typedef AdFrontRequest_PositionInfo PositionInfo;

  // accessors -------------------------------------------------------

  // required string req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline const ::std::string& req_id() const;
  inline void set_req_id(const ::std::string& value);
  inline void set_req_id(const char* value);
  inline void set_req_id(const char* value, size_t size);
  inline ::std::string* mutable_req_id();
  inline ::std::string* release_req_id();
  inline void set_allocated_req_id(::std::string* req_id);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string user_agent = 3;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 3;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const char* value, size_t size);
  inline ::std::string* mutable_user_agent();
  inline ::std::string* release_user_agent();
  inline void set_allocated_user_agent(::std::string* user_agent);

  // optional string user_id = 4;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 4;
  inline const ::std::string& user_id() const;
  inline void set_user_id(const ::std::string& value);
  inline void set_user_id(const char* value);
  inline void set_user_id(const char* value, size_t size);
  inline ::std::string* mutable_user_id();
  inline ::std::string* release_user_id();
  inline void set_allocated_user_id(::std::string* user_id);

  // optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
  inline bool has_page_info() const;
  inline void clear_page_info();
  static const int kPageInfoFieldNumber = 5;
  inline const ::AdEngineFront::AdFrontRequest_PageInfo& page_info() const;
  inline ::AdEngineFront::AdFrontRequest_PageInfo* mutable_page_info();
  inline ::AdEngineFront::AdFrontRequest_PageInfo* release_page_info();
  inline void set_allocated_page_info(::AdEngineFront::AdFrontRequest_PageInfo* page_info);

  // optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
  inline bool has_mobile() const;
  inline void clear_mobile();
  static const int kMobileFieldNumber = 6;
  inline const ::AdEngineFront::AdFrontRequest_Mobile& mobile() const;
  inline ::AdEngineFront::AdFrontRequest_Mobile* mutable_mobile();
  inline ::AdEngineFront::AdFrontRequest_Mobile* release_mobile();
  inline void set_allocated_mobile(::AdEngineFront::AdFrontRequest_Mobile* mobile);

  // repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
  inline int position_info_size() const;
  inline void clear_position_info();
  static const int kPositionInfoFieldNumber = 7;
  inline const ::AdEngineFront::AdFrontRequest_PositionInfo& position_info(int index) const;
  inline ::AdEngineFront::AdFrontRequest_PositionInfo* mutable_position_info(int index);
  inline ::AdEngineFront::AdFrontRequest_PositionInfo* add_position_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontRequest_PositionInfo >&
      position_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontRequest_PositionInfo >*
      mutable_position_info();

  // optional bool is_debug = 8 [default = false];
  inline bool has_is_debug() const;
  inline void clear_is_debug();
  static const int kIsDebugFieldNumber = 8;
  inline bool is_debug() const;
  inline void set_is_debug(bool value);

  // optional uint64 carousel_random_id = 9;
  inline bool has_carousel_random_id() const;
  inline void clear_carousel_random_id();
  static const int kCarouselRandomIdFieldNumber = 9;
  inline ::google::protobuf::uint64 carousel_random_id() const;
  inline void set_carousel_random_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontRequest)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_user_agent();
  inline void clear_has_user_agent();
  inline void set_has_user_id();
  inline void clear_has_user_id();
  inline void set_has_page_info();
  inline void clear_has_page_info();
  inline void set_has_mobile();
  inline void clear_has_mobile();
  inline void set_has_is_debug();
  inline void clear_has_is_debug();
  inline void set_has_carousel_random_id();
  inline void clear_has_carousel_random_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_id_;
  ::std::string* ip_;
  ::std::string* user_agent_;
  ::std::string* user_id_;
  ::AdEngineFront::AdFrontRequest_PageInfo* page_info_;
  ::AdEngineFront::AdFrontRequest_Mobile* mobile_;
  ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontRequest_PositionInfo > position_info_;
  ::google::protobuf::uint64 carousel_random_id_;
  bool is_debug_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontRequest* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontResponse_UserInfo : public ::google::protobuf::Message {
 public:
  AdFrontResponse_UserInfo();
  virtual ~AdFrontResponse_UserInfo();

  AdFrontResponse_UserInfo(const AdFrontResponse_UserInfo& from);

  inline AdFrontResponse_UserInfo& operator=(const AdFrontResponse_UserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontResponse_UserInfo& default_instance();

  void Swap(AdFrontResponse_UserInfo* other);

  // implements Message ----------------------------------------------

  AdFrontResponse_UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontResponse_UserInfo& from);
  void MergeFrom(const AdFrontResponse_UserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string user_auto_brand = 1;
  inline int user_auto_brand_size() const;
  inline void clear_user_auto_brand();
  static const int kUserAutoBrandFieldNumber = 1;
  inline const ::std::string& user_auto_brand(int index) const;
  inline ::std::string* mutable_user_auto_brand(int index);
  inline void set_user_auto_brand(int index, const ::std::string& value);
  inline void set_user_auto_brand(int index, const char* value);
  inline void set_user_auto_brand(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_brand();
  inline void add_user_auto_brand(const ::std::string& value);
  inline void add_user_auto_brand(const char* value);
  inline void add_user_auto_brand(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_brand() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_brand();

  // repeated string user_auto_serie = 7;
  inline int user_auto_serie_size() const;
  inline void clear_user_auto_serie();
  static const int kUserAutoSerieFieldNumber = 7;
  inline const ::std::string& user_auto_serie(int index) const;
  inline ::std::string* mutable_user_auto_serie(int index);
  inline void set_user_auto_serie(int index, const ::std::string& value);
  inline void set_user_auto_serie(int index, const char* value);
  inline void set_user_auto_serie(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_serie();
  inline void add_user_auto_serie(const ::std::string& value);
  inline void add_user_auto_serie(const char* value);
  inline void add_user_auto_serie(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_serie() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_serie();

  // repeated string user_auto_level = 2;
  inline int user_auto_level_size() const;
  inline void clear_user_auto_level();
  static const int kUserAutoLevelFieldNumber = 2;
  inline const ::std::string& user_auto_level(int index) const;
  inline ::std::string* mutable_user_auto_level(int index);
  inline void set_user_auto_level(int index, const ::std::string& value);
  inline void set_user_auto_level(int index, const char* value);
  inline void set_user_auto_level(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_level();
  inline void add_user_auto_level(const ::std::string& value);
  inline void add_user_auto_level(const char* value);
  inline void add_user_auto_level(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_level() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_level();

  // repeated string user_auto_price = 3;
  inline int user_auto_price_size() const;
  inline void clear_user_auto_price();
  static const int kUserAutoPriceFieldNumber = 3;
  inline const ::std::string& user_auto_price(int index) const;
  inline ::std::string* mutable_user_auto_price(int index);
  inline void set_user_auto_price(int index, const ::std::string& value);
  inline void set_user_auto_price(int index, const char* value);
  inline void set_user_auto_price(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_price();
  inline void add_user_auto_price(const ::std::string& value);
  inline void add_user_auto_price(const char* value);
  inline void add_user_auto_price(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_price() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_price();

  // optional string user_province = 4;
  inline bool has_user_province() const;
  inline void clear_user_province();
  static const int kUserProvinceFieldNumber = 4;
  inline const ::std::string& user_province() const;
  inline void set_user_province(const ::std::string& value);
  inline void set_user_province(const char* value);
  inline void set_user_province(const char* value, size_t size);
  inline ::std::string* mutable_user_province();
  inline ::std::string* release_user_province();
  inline void set_allocated_user_province(::std::string* user_province);

  // optional string user_city = 5;
  inline bool has_user_city() const;
  inline void clear_user_city();
  static const int kUserCityFieldNumber = 5;
  inline const ::std::string& user_city() const;
  inline void set_user_city(const ::std::string& value);
  inline void set_user_city(const char* value);
  inline void set_user_city(const char* value, size_t size);
  inline ::std::string* mutable_user_city();
  inline ::std::string* release_user_city();
  inline void set_allocated_user_city(::std::string* user_city);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontResponse.UserInfo)
 private:
  inline void set_has_user_province();
  inline void clear_has_user_province();
  inline void set_has_user_city();
  inline void clear_has_user_city();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_brand_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_serie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_price_;
  ::std::string* user_province_;
  ::std::string* user_city_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontResponse_UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget : public ::google::protobuf::Message {
 public:
  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget();
  virtual ~AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget();

  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from);

  inline AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& operator=(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& default_instance();

  void Swap(AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* other);

  // implements Message ----------------------------------------------

  AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from);
  void MergeFrom(const AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string mobile_platform = 1;
  inline int mobile_platform_size() const;
  inline void clear_mobile_platform();
  static const int kMobilePlatformFieldNumber = 1;
  inline const ::std::string& mobile_platform(int index) const;
  inline ::std::string* mutable_mobile_platform(int index);
  inline void set_mobile_platform(int index, const ::std::string& value);
  inline void set_mobile_platform(int index, const char* value);
  inline void set_mobile_platform(int index, const char* value, size_t size);
  inline ::std::string* add_mobile_platform();
  inline void add_mobile_platform(const ::std::string& value);
  inline void add_mobile_platform(const char* value);
  inline void add_mobile_platform(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mobile_platform() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mobile_platform();

  // repeated string mobile_connection_type = 2;
  inline int mobile_connection_type_size() const;
  inline void clear_mobile_connection_type();
  static const int kMobileConnectionTypeFieldNumber = 2;
  inline const ::std::string& mobile_connection_type(int index) const;
  inline ::std::string* mutable_mobile_connection_type(int index);
  inline void set_mobile_connection_type(int index, const ::std::string& value);
  inline void set_mobile_connection_type(int index, const char* value);
  inline void set_mobile_connection_type(int index, const char* value, size_t size);
  inline ::std::string* add_mobile_connection_type();
  inline void add_mobile_connection_type(const ::std::string& value);
  inline void add_mobile_connection_type(const char* value);
  inline void add_mobile_connection_type(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& mobile_connection_type() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_mobile_connection_type();

  // repeated string page_delivery_hour = 3;
  inline int page_delivery_hour_size() const;
  inline void clear_page_delivery_hour();
  static const int kPageDeliveryHourFieldNumber = 3;
  inline const ::std::string& page_delivery_hour(int index) const;
  inline ::std::string* mutable_page_delivery_hour(int index);
  inline void set_page_delivery_hour(int index, const ::std::string& value);
  inline void set_page_delivery_hour(int index, const char* value);
  inline void set_page_delivery_hour(int index, const char* value, size_t size);
  inline ::std::string* add_page_delivery_hour();
  inline void add_page_delivery_hour(const ::std::string& value);
  inline void add_page_delivery_hour(const char* value);
  inline void add_page_delivery_hour(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_delivery_hour() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_delivery_hour();

  // repeated string page_province = 4;
  inline int page_province_size() const;
  inline void clear_page_province();
  static const int kPageProvinceFieldNumber = 4;
  inline const ::std::string& page_province(int index) const;
  inline ::std::string* mutable_page_province(int index);
  inline void set_page_province(int index, const ::std::string& value);
  inline void set_page_province(int index, const char* value);
  inline void set_page_province(int index, const char* value, size_t size);
  inline ::std::string* add_page_province();
  inline void add_page_province(const ::std::string& value);
  inline void add_page_province(const char* value);
  inline void add_page_province(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_province() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_province();

  // repeated string page_city = 5;
  inline int page_city_size() const;
  inline void clear_page_city();
  static const int kPageCityFieldNumber = 5;
  inline const ::std::string& page_city(int index) const;
  inline ::std::string* mutable_page_city(int index);
  inline void set_page_city(int index, const ::std::string& value);
  inline void set_page_city(int index, const char* value);
  inline void set_page_city(int index, const char* value, size_t size);
  inline ::std::string* add_page_city();
  inline void add_page_city(const ::std::string& value);
  inline void add_page_city(const char* value);
  inline void add_page_city(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_city() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_city();

  // repeated string page_auto_brand = 6;
  inline int page_auto_brand_size() const;
  inline void clear_page_auto_brand();
  static const int kPageAutoBrandFieldNumber = 6;
  inline const ::std::string& page_auto_brand(int index) const;
  inline ::std::string* mutable_page_auto_brand(int index);
  inline void set_page_auto_brand(int index, const ::std::string& value);
  inline void set_page_auto_brand(int index, const char* value);
  inline void set_page_auto_brand(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_brand();
  inline void add_page_auto_brand(const ::std::string& value);
  inline void add_page_auto_brand(const char* value);
  inline void add_page_auto_brand(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_brand() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_brand();

  // repeated string page_auto_serie = 7;
  inline int page_auto_serie_size() const;
  inline void clear_page_auto_serie();
  static const int kPageAutoSerieFieldNumber = 7;
  inline const ::std::string& page_auto_serie(int index) const;
  inline ::std::string* mutable_page_auto_serie(int index);
  inline void set_page_auto_serie(int index, const ::std::string& value);
  inline void set_page_auto_serie(int index, const char* value);
  inline void set_page_auto_serie(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_serie();
  inline void add_page_auto_serie(const ::std::string& value);
  inline void add_page_auto_serie(const char* value);
  inline void add_page_auto_serie(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_serie() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_serie();

  // repeated string page_auto_level = 8;
  inline int page_auto_level_size() const;
  inline void clear_page_auto_level();
  static const int kPageAutoLevelFieldNumber = 8;
  inline const ::std::string& page_auto_level(int index) const;
  inline ::std::string* mutable_page_auto_level(int index);
  inline void set_page_auto_level(int index, const ::std::string& value);
  inline void set_page_auto_level(int index, const char* value);
  inline void set_page_auto_level(int index, const char* value, size_t size);
  inline ::std::string* add_page_auto_level();
  inline void add_page_auto_level(const ::std::string& value);
  inline void add_page_auto_level(const char* value);
  inline void add_page_auto_level(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& page_auto_level() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_page_auto_level();

  // repeated string user_auto_serie = 10;
  inline int user_auto_serie_size() const;
  inline void clear_user_auto_serie();
  static const int kUserAutoSerieFieldNumber = 10;
  inline const ::std::string& user_auto_serie(int index) const;
  inline ::std::string* mutable_user_auto_serie(int index);
  inline void set_user_auto_serie(int index, const ::std::string& value);
  inline void set_user_auto_serie(int index, const char* value);
  inline void set_user_auto_serie(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_serie();
  inline void add_user_auto_serie(const ::std::string& value);
  inline void add_user_auto_serie(const char* value);
  inline void add_user_auto_serie(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_serie() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_serie();

  // repeated string user_auto_level = 11;
  inline int user_auto_level_size() const;
  inline void clear_user_auto_level();
  static const int kUserAutoLevelFieldNumber = 11;
  inline const ::std::string& user_auto_level(int index) const;
  inline ::std::string* mutable_user_auto_level(int index);
  inline void set_user_auto_level(int index, const ::std::string& value);
  inline void set_user_auto_level(int index, const char* value);
  inline void set_user_auto_level(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_level();
  inline void add_user_auto_level(const ::std::string& value);
  inline void add_user_auto_level(const char* value);
  inline void add_user_auto_level(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_level() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_level();

  // repeated string user_auto_price = 12;
  inline int user_auto_price_size() const;
  inline void clear_user_auto_price();
  static const int kUserAutoPriceFieldNumber = 12;
  inline const ::std::string& user_auto_price(int index) const;
  inline ::std::string* mutable_user_auto_price(int index);
  inline void set_user_auto_price(int index, const ::std::string& value);
  inline void set_user_auto_price(int index, const char* value);
  inline void set_user_auto_price(int index, const char* value, size_t size);
  inline ::std::string* add_user_auto_price();
  inline void add_user_auto_price(const ::std::string& value);
  inline void add_user_auto_price(const char* value);
  inline void add_user_auto_price(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user_auto_price() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user_auto_price();

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> mobile_platform_;
  ::google::protobuf::RepeatedPtrField< ::std::string> mobile_connection_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_delivery_hour_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_province_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_city_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_brand_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_serie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> page_auto_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_serie_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_level_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_auto_price_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontResponse_PositionInfo_CreativeInfo : public ::google::protobuf::Message {
 public:
  AdFrontResponse_PositionInfo_CreativeInfo();
  virtual ~AdFrontResponse_PositionInfo_CreativeInfo();

  AdFrontResponse_PositionInfo_CreativeInfo(const AdFrontResponse_PositionInfo_CreativeInfo& from);

  inline AdFrontResponse_PositionInfo_CreativeInfo& operator=(const AdFrontResponse_PositionInfo_CreativeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontResponse_PositionInfo_CreativeInfo& default_instance();

  void Swap(AdFrontResponse_PositionInfo_CreativeInfo* other);

  // implements Message ----------------------------------------------

  AdFrontResponse_PositionInfo_CreativeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontResponse_PositionInfo_CreativeInfo& from);
  void MergeFrom(const AdFrontResponse_PositionInfo_CreativeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget CreativeTarget;

  // accessors -------------------------------------------------------

  // required uint64 creative_id = 1;
  inline bool has_creative_id() const;
  inline void clear_creative_id();
  static const int kCreativeIdFieldNumber = 1;
  inline ::google::protobuf::uint64 creative_id() const;
  inline void set_creative_id(::google::protobuf::uint64 value);

  // optional string creative_type = 2;
  inline bool has_creative_type() const;
  inline void clear_creative_type();
  static const int kCreativeTypeFieldNumber = 2;
  inline const ::std::string& creative_type() const;
  inline void set_creative_type(const ::std::string& value);
  inline void set_creative_type(const char* value);
  inline void set_creative_type(const char* value, size_t size);
  inline ::std::string* mutable_creative_type();
  inline ::std::string* release_creative_type();
  inline void set_allocated_creative_type(::std::string* creative_type);

  // optional string creative_size = 3;
  inline bool has_creative_size() const;
  inline void clear_creative_size();
  static const int kCreativeSizeFieldNumber = 3;
  inline const ::std::string& creative_size() const;
  inline void set_creative_size(const ::std::string& value);
  inline void set_creative_size(const char* value);
  inline void set_creative_size(const char* value, size_t size);
  inline ::std::string* mutable_creative_size();
  inline ::std::string* release_creative_size();
  inline void set_allocated_creative_size(::std::string* creative_size);

  // optional string width_height = 4;
  inline bool has_width_height() const;
  inline void clear_width_height();
  static const int kWidthHeightFieldNumber = 4;
  inline const ::std::string& width_height() const;
  inline void set_width_height(const ::std::string& value);
  inline void set_width_height(const char* value);
  inline void set_width_height(const char* value, size_t size);
  inline ::std::string* mutable_width_height();
  inline ::std::string* release_width_height();
  inline void set_allocated_width_height(::std::string* width_height);

  // optional string word_chain_len = 5;
  inline bool has_word_chain_len() const;
  inline void clear_word_chain_len();
  static const int kWordChainLenFieldNumber = 5;
  inline const ::std::string& word_chain_len() const;
  inline void set_word_chain_len(const ::std::string& value);
  inline void set_word_chain_len(const char* value);
  inline void set_word_chain_len(const char* value, size_t size);
  inline ::std::string* mutable_word_chain_len();
  inline ::std::string* release_word_chain_len();
  inline void set_allocated_word_chain_len(::std::string* word_chain_len);

  // optional string sell_model = 6;
  inline bool has_sell_model() const;
  inline void clear_sell_model();
  static const int kSellModelFieldNumber = 6;
  inline const ::std::string& sell_model() const;
  inline void set_sell_model(const ::std::string& value);
  inline void set_sell_model(const char* value);
  inline void set_sell_model(const char* value, size_t size);
  inline ::std::string* mutable_sell_model();
  inline ::std::string* release_sell_model();
  inline void set_allocated_sell_model(::std::string* sell_model);

  // optional bool is_internal = 7;
  inline bool has_is_internal() const;
  inline void clear_is_internal();
  static const int kIsInternalFieldNumber = 7;
  inline bool is_internal() const;
  inline void set_is_internal(bool value);

  // optional uint64 order_id = 8;
  inline bool has_order_id() const;
  inline void clear_order_id();
  static const int kOrderIdFieldNumber = 8;
  inline ::google::protobuf::uint64 order_id() const;
  inline void set_order_id(::google::protobuf::uint64 value);

  // optional uint64 campaign_id = 9;
  inline bool has_campaign_id() const;
  inline void clear_campaign_id();
  static const int kCampaignIdFieldNumber = 9;
  inline ::google::protobuf::uint64 campaign_id() const;
  inline void set_campaign_id(::google::protobuf::uint64 value);

  // optional uint64 group_id = 10;
  inline bool has_group_id() const;
  inline void clear_group_id();
  static const int kGroupIdFieldNumber = 10;
  inline ::google::protobuf::uint64 group_id() const;
  inline void set_group_id(::google::protobuf::uint64 value);

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
  inline bool has_creative_target() const;
  inline void clear_creative_target();
  static const int kCreativeTargetFieldNumber = 11;
  inline const ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& creative_target() const;
  inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* mutable_creative_target();
  inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* release_creative_target();
  inline void set_allocated_creative_target(::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* creative_target);

  // optional string creative_html = 12;
  inline bool has_creative_html() const;
  inline void clear_creative_html();
  static const int kCreativeHtmlFieldNumber = 12;
  inline const ::std::string& creative_html() const;
  inline void set_creative_html(const ::std::string& value);
  inline void set_creative_html(const char* value);
  inline void set_creative_html(const char* value, size_t size);
  inline ::std::string* mutable_creative_html();
  inline ::std::string* release_creative_html();
  inline void set_allocated_creative_html(::std::string* creative_html);

  // optional float creative_ecpm = 13;
  inline bool has_creative_ecpm() const;
  inline void clear_creative_ecpm();
  static const int kCreativeEcpmFieldNumber = 13;
  inline float creative_ecpm() const;
  inline void set_creative_ecpm(float value);

  // optional uint64 creative_column = 14;
  inline bool has_creative_column() const;
  inline void clear_creative_column();
  static const int kCreativeColumnFieldNumber = 14;
  inline ::google::protobuf::uint64 creative_column() const;
  inline void set_creative_column(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo)
 private:
  inline void set_has_creative_id();
  inline void clear_has_creative_id();
  inline void set_has_creative_type();
  inline void clear_has_creative_type();
  inline void set_has_creative_size();
  inline void clear_has_creative_size();
  inline void set_has_width_height();
  inline void clear_has_width_height();
  inline void set_has_word_chain_len();
  inline void clear_has_word_chain_len();
  inline void set_has_sell_model();
  inline void clear_has_sell_model();
  inline void set_has_is_internal();
  inline void clear_has_is_internal();
  inline void set_has_order_id();
  inline void clear_has_order_id();
  inline void set_has_campaign_id();
  inline void clear_has_campaign_id();
  inline void set_has_group_id();
  inline void clear_has_group_id();
  inline void set_has_creative_target();
  inline void clear_has_creative_target();
  inline void set_has_creative_html();
  inline void clear_has_creative_html();
  inline void set_has_creative_ecpm();
  inline void clear_has_creative_ecpm();
  inline void set_has_creative_column();
  inline void clear_has_creative_column();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 creative_id_;
  ::std::string* creative_type_;
  ::std::string* creative_size_;
  ::std::string* width_height_;
  ::std::string* word_chain_len_;
  ::std::string* sell_model_;
  ::google::protobuf::uint64 order_id_;
  ::google::protobuf::uint64 campaign_id_;
  ::google::protobuf::uint64 group_id_;
  bool is_internal_;
  float creative_ecpm_;
  ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* creative_target_;
  ::std::string* creative_html_;
  ::google::protobuf::uint64 creative_column_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontResponse_PositionInfo_CreativeInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontResponse_PositionInfo : public ::google::protobuf::Message {
 public:
  AdFrontResponse_PositionInfo();
  virtual ~AdFrontResponse_PositionInfo();

  AdFrontResponse_PositionInfo(const AdFrontResponse_PositionInfo& from);

  inline AdFrontResponse_PositionInfo& operator=(const AdFrontResponse_PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontResponse_PositionInfo& default_instance();

  void Swap(AdFrontResponse_PositionInfo* other);

  // implements Message ----------------------------------------------

  AdFrontResponse_PositionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontResponse_PositionInfo& from);
  void MergeFrom(const AdFrontResponse_PositionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdFrontResponse_PositionInfo_CreativeInfo CreativeInfo;

  // accessors -------------------------------------------------------

  // required uint64 position_id = 1;
  inline bool has_position_id() const;
  inline void clear_position_id();
  static const int kPositionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 position_id() const;
  inline void set_position_id(::google::protobuf::uint64 value);

  // optional string pv_id = 2;
  inline bool has_pv_id() const;
  inline void clear_pv_id();
  static const int kPvIdFieldNumber = 2;
  inline const ::std::string& pv_id() const;
  inline void set_pv_id(const ::std::string& value);
  inline void set_pv_id(const char* value);
  inline void set_pv_id(const char* value, size_t size);
  inline ::std::string* mutable_pv_id();
  inline ::std::string* release_pv_id();
  inline void set_allocated_pv_id(::std::string* pv_id);

  // repeated string sell_model = 3;
  inline int sell_model_size() const;
  inline void clear_sell_model();
  static const int kSellModelFieldNumber = 3;
  inline const ::std::string& sell_model(int index) const;
  inline ::std::string* mutable_sell_model(int index);
  inline void set_sell_model(int index, const ::std::string& value);
  inline void set_sell_model(int index, const char* value);
  inline void set_sell_model(int index, const char* value, size_t size);
  inline ::std::string* add_sell_model();
  inline void add_sell_model(const ::std::string& value);
  inline void add_sell_model(const char* value);
  inline void add_sell_model(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& sell_model() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_sell_model();

  // optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
  inline bool has_creative_info() const;
  inline void clear_creative_info();
  static const int kCreativeInfoFieldNumber = 4;
  inline const ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo& creative_info() const;
  inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* mutable_creative_info();
  inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* release_creative_info();
  inline void set_allocated_creative_info(::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* creative_info);

  // optional string request_path = 5;
  inline bool has_request_path() const;
  inline void clear_request_path();
  static const int kRequestPathFieldNumber = 5;
  inline const ::std::string& request_path() const;
  inline void set_request_path(const ::std::string& value);
  inline void set_request_path(const char* value);
  inline void set_request_path(const char* value, size_t size);
  inline ::std::string* mutable_request_path();
  inline ::std::string* release_request_path();
  inline void set_allocated_request_path(::std::string* request_path);

  // optional string rank_path = 6;
  inline bool has_rank_path() const;
  inline void clear_rank_path();
  static const int kRankPathFieldNumber = 6;
  inline const ::std::string& rank_path() const;
  inline void set_rank_path(const ::std::string& value);
  inline void set_rank_path(const char* value);
  inline void set_rank_path(const char* value, size_t size);
  inline ::std::string* mutable_rank_path();
  inline ::std::string* release_rank_path();
  inline void set_allocated_rank_path(::std::string* rank_path);

  // optional string position_label = 7;
  inline bool has_position_label() const;
  inline void clear_position_label();
  static const int kPositionLabelFieldNumber = 7;
  inline const ::std::string& position_label() const;
  inline void set_position_label(const ::std::string& value);
  inline void set_position_label(const char* value);
  inline void set_position_label(const char* value, size_t size);
  inline ::std::string* mutable_position_label();
  inline ::std::string* release_position_label();
  inline void set_allocated_position_label(::std::string* position_label);

  // optional uint64 carouselid = 8;
  inline bool has_carouselid() const;
  inline void clear_carouselid();
  static const int kCarouselidFieldNumber = 8;
  inline ::google::protobuf::uint64 carouselid() const;
  inline void set_carouselid(::google::protobuf::uint64 value);

  // optional string algo_detail = 9;
  inline bool has_algo_detail() const;
  inline void clear_algo_detail();
  static const int kAlgoDetailFieldNumber = 9;
  inline const ::std::string& algo_detail() const;
  inline void set_algo_detail(const ::std::string& value);
  inline void set_algo_detail(const char* value);
  inline void set_algo_detail(const char* value, size_t size);
  inline ::std::string* mutable_algo_detail();
  inline ::std::string* release_algo_detail();
  inline void set_allocated_algo_detail(::std::string* algo_detail);

  // optional string width_height = 10;
  inline bool has_width_height() const;
  inline void clear_width_height();
  static const int kWidthHeightFieldNumber = 10;
  inline const ::std::string& width_height() const;
  inline void set_width_height(const ::std::string& value);
  inline void set_width_height(const char* value);
  inline void set_width_height(const char* value, size_t size);
  inline ::std::string* mutable_width_height();
  inline ::std::string* release_width_height();
  inline void set_allocated_width_height(::std::string* width_height);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontResponse.PositionInfo)
 private:
  inline void set_has_position_id();
  inline void clear_has_position_id();
  inline void set_has_pv_id();
  inline void clear_has_pv_id();
  inline void set_has_creative_info();
  inline void clear_has_creative_info();
  inline void set_has_request_path();
  inline void clear_has_request_path();
  inline void set_has_rank_path();
  inline void clear_has_rank_path();
  inline void set_has_position_label();
  inline void clear_has_position_label();
  inline void set_has_carouselid();
  inline void clear_has_carouselid();
  inline void set_has_algo_detail();
  inline void clear_has_algo_detail();
  inline void set_has_width_height();
  inline void clear_has_width_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 position_id_;
  ::std::string* pv_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> sell_model_;
  ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* creative_info_;
  ::std::string* request_path_;
  ::std::string* rank_path_;
  ::std::string* position_label_;
  ::google::protobuf::uint64 carouselid_;
  ::std::string* algo_detail_;
  ::std::string* width_height_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontResponse_PositionInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdFrontResponse : public ::google::protobuf::Message {
 public:
  AdFrontResponse();
  virtual ~AdFrontResponse();

  AdFrontResponse(const AdFrontResponse& from);

  inline AdFrontResponse& operator=(const AdFrontResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AdFrontResponse& default_instance();

  void Swap(AdFrontResponse* other);

  // implements Message ----------------------------------------------

  AdFrontResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdFrontResponse& from);
  void MergeFrom(const AdFrontResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AdFrontResponse_UserInfo UserInfo;
  typedef AdFrontResponse_PositionInfo PositionInfo;

  // accessors -------------------------------------------------------

  // required string req_id = 1;
  inline bool has_req_id() const;
  inline void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  inline const ::std::string& req_id() const;
  inline void set_req_id(const ::std::string& value);
  inline void set_req_id(const char* value);
  inline void set_req_id(const char* value, size_t size);
  inline ::std::string* mutable_req_id();
  inline ::std::string* release_req_id();
  inline void set_allocated_req_id(::std::string* req_id);

  // optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 2;
  inline const ::AdEngineFront::AdFrontResponse_UserInfo& user_info() const;
  inline ::AdEngineFront::AdFrontResponse_UserInfo* mutable_user_info();
  inline ::AdEngineFront::AdFrontResponse_UserInfo* release_user_info();
  inline void set_allocated_user_info(::AdEngineFront::AdFrontResponse_UserInfo* user_info);

  // repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
  inline int position_info_size() const;
  inline void clear_position_info();
  static const int kPositionInfoFieldNumber = 3;
  inline const ::AdEngineFront::AdFrontResponse_PositionInfo& position_info(int index) const;
  inline ::AdEngineFront::AdFrontResponse_PositionInfo* mutable_position_info(int index);
  inline ::AdEngineFront::AdFrontResponse_PositionInfo* add_position_info();
  inline const ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontResponse_PositionInfo >&
      position_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontResponse_PositionInfo >*
      mutable_position_info();

  // optional string algorithm_bucket = 4;
  inline bool has_algorithm_bucket() const;
  inline void clear_algorithm_bucket();
  static const int kAlgorithmBucketFieldNumber = 4;
  inline const ::std::string& algorithm_bucket() const;
  inline void set_algorithm_bucket(const ::std::string& value);
  inline void set_algorithm_bucket(const char* value);
  inline void set_algorithm_bucket(const char* value, size_t size);
  inline ::std::string* mutable_algorithm_bucket();
  inline ::std::string* release_algorithm_bucket();
  inline void set_allocated_algorithm_bucket(::std::string* algorithm_bucket);

  // optional int32 processing_time_ms = 5;
  inline bool has_processing_time_ms() const;
  inline void clear_processing_time_ms();
  static const int kProcessingTimeMsFieldNumber = 5;
  inline ::google::protobuf::int32 processing_time_ms() const;
  inline void set_processing_time_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:AdEngineFront.AdFrontResponse)
 private:
  inline void set_has_req_id();
  inline void clear_has_req_id();
  inline void set_has_user_info();
  inline void clear_has_user_info();
  inline void set_has_algorithm_bucket();
  inline void clear_has_algorithm_bucket();
  inline void set_has_processing_time_ms();
  inline void clear_has_processing_time_ms();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* req_id_;
  ::AdEngineFront::AdFrontResponse_UserInfo* user_info_;
  ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontResponse_PositionInfo > position_info_;
  ::std::string* algorithm_bucket_;
  ::google::protobuf::int32 processing_time_ms_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_engine_5fadfront_2eproto();
  friend void protobuf_AssignDesc_engine_5fadfront_2eproto();
  friend void protobuf_ShutdownFile_engine_5fadfront_2eproto();

  void InitAsDefaultInstance();
  static AdFrontResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// AdFrontRequest_PageInfo

// required string page_id = 1;
inline bool AdFrontRequest_PageInfo::has_page_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontRequest_PageInfo::set_has_page_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontRequest_PageInfo::clear_has_page_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontRequest_PageInfo::clear_page_id() {
  if (page_id_ != &::google::protobuf::internal::kEmptyString) {
    page_id_->clear();
  }
  clear_has_page_id();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_id() const {
  return *page_id_;
}
inline void AdFrontRequest_PageInfo::set_page_id(const ::std::string& value) {
  set_has_page_id();
  if (page_id_ == &::google::protobuf::internal::kEmptyString) {
    page_id_ = new ::std::string;
  }
  page_id_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_id(const char* value) {
  set_has_page_id();
  if (page_id_ == &::google::protobuf::internal::kEmptyString) {
    page_id_ = new ::std::string;
  }
  page_id_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_id(const char* value, size_t size) {
  set_has_page_id();
  if (page_id_ == &::google::protobuf::internal::kEmptyString) {
    page_id_ = new ::std::string;
  }
  page_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_id() {
  set_has_page_id();
  if (page_id_ == &::google::protobuf::internal::kEmptyString) {
    page_id_ = new ::std::string;
  }
  return page_id_;
}
inline ::std::string* AdFrontRequest_PageInfo::release_page_id() {
  clear_has_page_id();
  if (page_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_id_;
    page_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_PageInfo::set_allocated_page_id(::std::string* page_id) {
  if (page_id_ != &::google::protobuf::internal::kEmptyString) {
    delete page_id_;
  }
  if (page_id) {
    set_has_page_id();
    page_id_ = page_id;
  } else {
    clear_has_page_id();
    page_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_multiple = 2 [default = true];
inline bool AdFrontRequest_PageInfo::has_is_multiple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontRequest_PageInfo::set_has_is_multiple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontRequest_PageInfo::clear_has_is_multiple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontRequest_PageInfo::clear_is_multiple() {
  is_multiple_ = true;
  clear_has_is_multiple();
}
inline bool AdFrontRequest_PageInfo::is_multiple() const {
  return is_multiple_;
}
inline void AdFrontRequest_PageInfo::set_is_multiple(bool value) {
  set_has_is_multiple();
  is_multiple_ = value;
}

// optional string page_province = 3;
inline bool AdFrontRequest_PageInfo::has_page_province() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdFrontRequest_PageInfo::set_has_page_province() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdFrontRequest_PageInfo::clear_has_page_province() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdFrontRequest_PageInfo::clear_page_province() {
  if (page_province_ != &::google::protobuf::internal::kEmptyString) {
    page_province_->clear();
  }
  clear_has_page_province();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_province() const {
  return *page_province_;
}
inline void AdFrontRequest_PageInfo::set_page_province(const ::std::string& value) {
  set_has_page_province();
  if (page_province_ == &::google::protobuf::internal::kEmptyString) {
    page_province_ = new ::std::string;
  }
  page_province_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_province(const char* value) {
  set_has_page_province();
  if (page_province_ == &::google::protobuf::internal::kEmptyString) {
    page_province_ = new ::std::string;
  }
  page_province_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_province(const char* value, size_t size) {
  set_has_page_province();
  if (page_province_ == &::google::protobuf::internal::kEmptyString) {
    page_province_ = new ::std::string;
  }
  page_province_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_province() {
  set_has_page_province();
  if (page_province_ == &::google::protobuf::internal::kEmptyString) {
    page_province_ = new ::std::string;
  }
  return page_province_;
}
inline ::std::string* AdFrontRequest_PageInfo::release_page_province() {
  clear_has_page_province();
  if (page_province_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_province_;
    page_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_PageInfo::set_allocated_page_province(::std::string* page_province) {
  if (page_province_ != &::google::protobuf::internal::kEmptyString) {
    delete page_province_;
  }
  if (page_province) {
    set_has_page_province();
    page_province_ = page_province;
  } else {
    clear_has_page_province();
    page_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string page_city = 4;
inline bool AdFrontRequest_PageInfo::has_page_city() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontRequest_PageInfo::set_has_page_city() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontRequest_PageInfo::clear_has_page_city() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontRequest_PageInfo::clear_page_city() {
  if (page_city_ != &::google::protobuf::internal::kEmptyString) {
    page_city_->clear();
  }
  clear_has_page_city();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_city() const {
  return *page_city_;
}
inline void AdFrontRequest_PageInfo::set_page_city(const ::std::string& value) {
  set_has_page_city();
  if (page_city_ == &::google::protobuf::internal::kEmptyString) {
    page_city_ = new ::std::string;
  }
  page_city_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_city(const char* value) {
  set_has_page_city();
  if (page_city_ == &::google::protobuf::internal::kEmptyString) {
    page_city_ = new ::std::string;
  }
  page_city_->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_city(const char* value, size_t size) {
  set_has_page_city();
  if (page_city_ == &::google::protobuf::internal::kEmptyString) {
    page_city_ = new ::std::string;
  }
  page_city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_city() {
  set_has_page_city();
  if (page_city_ == &::google::protobuf::internal::kEmptyString) {
    page_city_ = new ::std::string;
  }
  return page_city_;
}
inline ::std::string* AdFrontRequest_PageInfo::release_page_city() {
  clear_has_page_city();
  if (page_city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = page_city_;
    page_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_PageInfo::set_allocated_page_city(::std::string* page_city) {
  if (page_city_ != &::google::protobuf::internal::kEmptyString) {
    delete page_city_;
  }
  if (page_city) {
    set_has_page_city();
    page_city_ = page_city;
  } else {
    clear_has_page_city();
    page_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string page_auto_brand = 5;
inline int AdFrontRequest_PageInfo::page_auto_brand_size() const {
  return page_auto_brand_.size();
}
inline void AdFrontRequest_PageInfo::clear_page_auto_brand() {
  page_auto_brand_.Clear();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_auto_brand(int index) const {
  return page_auto_brand_.Get(index);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_auto_brand(int index) {
  return page_auto_brand_.Mutable(index);
}
inline void AdFrontRequest_PageInfo::set_page_auto_brand(int index, const ::std::string& value) {
  page_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_brand(int index, const char* value) {
  page_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_brand(int index, const char* value, size_t size) {
  page_auto_brand_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::add_page_auto_brand() {
  return page_auto_brand_.Add();
}
inline void AdFrontRequest_PageInfo::add_page_auto_brand(const ::std::string& value) {
  page_auto_brand_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_brand(const char* value) {
  page_auto_brand_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_brand(const char* value, size_t size) {
  page_auto_brand_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontRequest_PageInfo::page_auto_brand() const {
  return page_auto_brand_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontRequest_PageInfo::mutable_page_auto_brand() {
  return &page_auto_brand_;
}

// repeated string page_auto_serie = 6;
inline int AdFrontRequest_PageInfo::page_auto_serie_size() const {
  return page_auto_serie_.size();
}
inline void AdFrontRequest_PageInfo::clear_page_auto_serie() {
  page_auto_serie_.Clear();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_auto_serie(int index) const {
  return page_auto_serie_.Get(index);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_auto_serie(int index) {
  return page_auto_serie_.Mutable(index);
}
inline void AdFrontRequest_PageInfo::set_page_auto_serie(int index, const ::std::string& value) {
  page_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_serie(int index, const char* value) {
  page_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_serie(int index, const char* value, size_t size) {
  page_auto_serie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::add_page_auto_serie() {
  return page_auto_serie_.Add();
}
inline void AdFrontRequest_PageInfo::add_page_auto_serie(const ::std::string& value) {
  page_auto_serie_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_serie(const char* value) {
  page_auto_serie_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_serie(const char* value, size_t size) {
  page_auto_serie_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontRequest_PageInfo::page_auto_serie() const {
  return page_auto_serie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontRequest_PageInfo::mutable_page_auto_serie() {
  return &page_auto_serie_;
}

// repeated string page_auto_level = 7;
inline int AdFrontRequest_PageInfo::page_auto_level_size() const {
  return page_auto_level_.size();
}
inline void AdFrontRequest_PageInfo::clear_page_auto_level() {
  page_auto_level_.Clear();
}
inline const ::std::string& AdFrontRequest_PageInfo::page_auto_level(int index) const {
  return page_auto_level_.Get(index);
}
inline ::std::string* AdFrontRequest_PageInfo::mutable_page_auto_level(int index) {
  return page_auto_level_.Mutable(index);
}
inline void AdFrontRequest_PageInfo::set_page_auto_level(int index, const ::std::string& value) {
  page_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_level(int index, const char* value) {
  page_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontRequest_PageInfo::set_page_auto_level(int index, const char* value, size_t size) {
  page_auto_level_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PageInfo::add_page_auto_level() {
  return page_auto_level_.Add();
}
inline void AdFrontRequest_PageInfo::add_page_auto_level(const ::std::string& value) {
  page_auto_level_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_level(const char* value) {
  page_auto_level_.Add()->assign(value);
}
inline void AdFrontRequest_PageInfo::add_page_auto_level(const char* value, size_t size) {
  page_auto_level_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontRequest_PageInfo::page_auto_level() const {
  return page_auto_level_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontRequest_PageInfo::mutable_page_auto_level() {
  return &page_auto_level_;
}

// -------------------------------------------------------------------

// AdFrontRequest_Mobile

// optional string platform = 1;
inline bool AdFrontRequest_Mobile::has_platform() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_platform() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontRequest_Mobile::clear_has_platform() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontRequest_Mobile::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& AdFrontRequest_Mobile::platform() const {
  return *platform_;
}
inline void AdFrontRequest_Mobile::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void AdFrontRequest_Mobile::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void AdFrontRequest_Mobile::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_Mobile::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* AdFrontRequest_Mobile::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_Mobile::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string brand = 2;
inline bool AdFrontRequest_Mobile::has_brand() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_brand() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontRequest_Mobile::clear_has_brand() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontRequest_Mobile::clear_brand() {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    brand_->clear();
  }
  clear_has_brand();
}
inline const ::std::string& AdFrontRequest_Mobile::brand() const {
  return *brand_;
}
inline void AdFrontRequest_Mobile::set_brand(const ::std::string& value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void AdFrontRequest_Mobile::set_brand(const char* value) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(value);
}
inline void AdFrontRequest_Mobile::set_brand(const char* value, size_t size) {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  brand_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_Mobile::mutable_brand() {
  set_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    brand_ = new ::std::string;
  }
  return brand_;
}
inline ::std::string* AdFrontRequest_Mobile::release_brand() {
  clear_has_brand();
  if (brand_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = brand_;
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_Mobile::set_allocated_brand(::std::string* brand) {
  if (brand_ != &::google::protobuf::internal::kEmptyString) {
    delete brand_;
  }
  if (brand) {
    set_has_brand();
    brand_ = brand;
  } else {
    clear_has_brand();
    brand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string model = 3;
inline bool AdFrontRequest_Mobile::has_model() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_model() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdFrontRequest_Mobile::clear_has_model() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdFrontRequest_Mobile::clear_model() {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    model_->clear();
  }
  clear_has_model();
}
inline const ::std::string& AdFrontRequest_Mobile::model() const {
  return *model_;
}
inline void AdFrontRequest_Mobile::set_model(const ::std::string& value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void AdFrontRequest_Mobile::set_model(const char* value) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(value);
}
inline void AdFrontRequest_Mobile::set_model(const char* value, size_t size) {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_Mobile::mutable_model() {
  set_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    model_ = new ::std::string;
  }
  return model_;
}
inline ::std::string* AdFrontRequest_Mobile::release_model() {
  clear_has_model();
  if (model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = model_;
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_Mobile::set_allocated_model(::std::string* model) {
  if (model_ != &::google::protobuf::internal::kEmptyString) {
    delete model_;
  }
  if (model) {
    set_has_model();
    model_ = model;
  } else {
    clear_has_model();
    model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string os_version = 4;
inline bool AdFrontRequest_Mobile::has_os_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_os_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontRequest_Mobile::clear_has_os_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontRequest_Mobile::clear_os_version() {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    os_version_->clear();
  }
  clear_has_os_version();
}
inline const ::std::string& AdFrontRequest_Mobile::os_version() const {
  return *os_version_;
}
inline void AdFrontRequest_Mobile::set_os_version(const ::std::string& value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void AdFrontRequest_Mobile::set_os_version(const char* value) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void AdFrontRequest_Mobile::set_os_version(const char* value, size_t size) {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_Mobile::mutable_os_version() {
  set_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}
inline ::std::string* AdFrontRequest_Mobile::release_os_version() {
  clear_has_os_version();
  if (os_version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = os_version_;
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_Mobile::set_allocated_os_version(::std::string* os_version) {
  if (os_version_ != &::google::protobuf::internal::kEmptyString) {
    delete os_version_;
  }
  if (os_version) {
    set_has_os_version();
    os_version_ = os_version;
  } else {
    clear_has_os_version();
    os_version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string connection_type = 5;
inline bool AdFrontRequest_Mobile::has_connection_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_connection_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontRequest_Mobile::clear_has_connection_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontRequest_Mobile::clear_connection_type() {
  if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
    connection_type_->clear();
  }
  clear_has_connection_type();
}
inline const ::std::string& AdFrontRequest_Mobile::connection_type() const {
  return *connection_type_;
}
inline void AdFrontRequest_Mobile::set_connection_type(const ::std::string& value) {
  set_has_connection_type();
  if (connection_type_ == &::google::protobuf::internal::kEmptyString) {
    connection_type_ = new ::std::string;
  }
  connection_type_->assign(value);
}
inline void AdFrontRequest_Mobile::set_connection_type(const char* value) {
  set_has_connection_type();
  if (connection_type_ == &::google::protobuf::internal::kEmptyString) {
    connection_type_ = new ::std::string;
  }
  connection_type_->assign(value);
}
inline void AdFrontRequest_Mobile::set_connection_type(const char* value, size_t size) {
  set_has_connection_type();
  if (connection_type_ == &::google::protobuf::internal::kEmptyString) {
    connection_type_ = new ::std::string;
  }
  connection_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_Mobile::mutable_connection_type() {
  set_has_connection_type();
  if (connection_type_ == &::google::protobuf::internal::kEmptyString) {
    connection_type_ = new ::std::string;
  }
  return connection_type_;
}
inline ::std::string* AdFrontRequest_Mobile::release_connection_type() {
  clear_has_connection_type();
  if (connection_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = connection_type_;
    connection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_Mobile::set_allocated_connection_type(::std::string* connection_type) {
  if (connection_type_ != &::google::protobuf::internal::kEmptyString) {
    delete connection_type_;
  }
  if (connection_type) {
    set_has_connection_type();
    connection_type_ = connection_type;
  } else {
    clear_has_connection_type();
    connection_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_app = 6 [default = false];
inline bool AdFrontRequest_Mobile::has_is_app() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_is_app() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdFrontRequest_Mobile::clear_has_is_app() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdFrontRequest_Mobile::clear_is_app() {
  is_app_ = false;
  clear_has_is_app();
}
inline bool AdFrontRequest_Mobile::is_app() const {
  return is_app_;
}
inline void AdFrontRequest_Mobile::set_is_app(bool value) {
  set_has_is_app();
  is_app_ = value;
}

// optional int32 latitude = 7;
inline bool AdFrontRequest_Mobile::has_latitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_latitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdFrontRequest_Mobile::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdFrontRequest_Mobile::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline ::google::protobuf::int32 AdFrontRequest_Mobile::latitude() const {
  return latitude_;
}
inline void AdFrontRequest_Mobile::set_latitude(::google::protobuf::int32 value) {
  set_has_latitude();
  latitude_ = value;
}

// optional int32 longitude = 8;
inline bool AdFrontRequest_Mobile::has_longitude() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdFrontRequest_Mobile::set_has_longitude() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdFrontRequest_Mobile::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdFrontRequest_Mobile::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline ::google::protobuf::int32 AdFrontRequest_Mobile::longitude() const {
  return longitude_;
}
inline void AdFrontRequest_Mobile::set_longitude(::google::protobuf::int32 value) {
  set_has_longitude();
  longitude_ = value;
}

// -------------------------------------------------------------------

// AdFrontRequest_PositionInfo

// required uint64 position_id = 1;
inline bool AdFrontRequest_PositionInfo::has_position_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontRequest_PositionInfo::set_has_position_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontRequest_PositionInfo::clear_has_position_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontRequest_PositionInfo::clear_position_id() {
  position_id_ = GOOGLE_ULONGLONG(0);
  clear_has_position_id();
}
inline ::google::protobuf::uint64 AdFrontRequest_PositionInfo::position_id() const {
  return position_id_;
}
inline void AdFrontRequest_PositionInfo::set_position_id(::google::protobuf::uint64 value) {
  set_has_position_id();
  position_id_ = value;
}

// optional string pv_id = 2;
inline bool AdFrontRequest_PositionInfo::has_pv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontRequest_PositionInfo::set_has_pv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontRequest_PositionInfo::clear_has_pv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontRequest_PositionInfo::clear_pv_id() {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    pv_id_->clear();
  }
  clear_has_pv_id();
}
inline const ::std::string& AdFrontRequest_PositionInfo::pv_id() const {
  return *pv_id_;
}
inline void AdFrontRequest_PositionInfo::set_pv_id(const ::std::string& value) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(value);
}
inline void AdFrontRequest_PositionInfo::set_pv_id(const char* value) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(value);
}
inline void AdFrontRequest_PositionInfo::set_pv_id(const char* value, size_t size) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest_PositionInfo::mutable_pv_id() {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  return pv_id_;
}
inline ::std::string* AdFrontRequest_PositionInfo::release_pv_id() {
  clear_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pv_id_;
    pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest_PositionInfo::set_allocated_pv_id(::std::string* pv_id) {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pv_id_;
  }
  if (pv_id) {
    set_has_pv_id();
    pv_id_ = pv_id;
  } else {
    clear_has_pv_id();
    pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdFrontRequest

// required string req_id = 1;
inline bool AdFrontRequest::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontRequest::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontRequest::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontRequest::clear_req_id() {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    req_id_->clear();
  }
  clear_has_req_id();
}
inline const ::std::string& AdFrontRequest::req_id() const {
  return *req_id_;
}
inline void AdFrontRequest::set_req_id(const ::std::string& value) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(value);
}
inline void AdFrontRequest::set_req_id(const char* value) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(value);
}
inline void AdFrontRequest::set_req_id(const char* value, size_t size) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest::mutable_req_id() {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  return req_id_;
}
inline ::std::string* AdFrontRequest::release_req_id() {
  clear_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_id_;
    req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest::set_allocated_req_id(::std::string* req_id) {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete req_id_;
  }
  if (req_id) {
    set_has_req_id();
    req_id_ = req_id;
  } else {
    clear_has_req_id();
    req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 2;
inline bool AdFrontRequest::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontRequest::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontRequest::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontRequest::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& AdFrontRequest::ip() const {
  return *ip_;
}
inline void AdFrontRequest::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AdFrontRequest::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void AdFrontRequest::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* AdFrontRequest::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_agent = 3;
inline bool AdFrontRequest::has_user_agent() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdFrontRequest::set_has_user_agent() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdFrontRequest::clear_has_user_agent() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdFrontRequest::clear_user_agent() {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    user_agent_->clear();
  }
  clear_has_user_agent();
}
inline const ::std::string& AdFrontRequest::user_agent() const {
  return *user_agent_;
}
inline void AdFrontRequest::set_user_agent(const ::std::string& value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void AdFrontRequest::set_user_agent(const char* value) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void AdFrontRequest::set_user_agent(const char* value, size_t size) {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest::mutable_user_agent() {
  set_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    user_agent_ = new ::std::string;
  }
  return user_agent_;
}
inline ::std::string* AdFrontRequest::release_user_agent() {
  clear_has_user_agent();
  if (user_agent_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_agent_;
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest::set_allocated_user_agent(::std::string* user_agent) {
  if (user_agent_ != &::google::protobuf::internal::kEmptyString) {
    delete user_agent_;
  }
  if (user_agent) {
    set_has_user_agent();
    user_agent_ = user_agent;
  } else {
    clear_has_user_agent();
    user_agent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_id = 4;
inline bool AdFrontRequest::has_user_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontRequest::set_has_user_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontRequest::clear_has_user_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontRequest::clear_user_id() {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    user_id_->clear();
  }
  clear_has_user_id();
}
inline const ::std::string& AdFrontRequest::user_id() const {
  return *user_id_;
}
inline void AdFrontRequest::set_user_id(const ::std::string& value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void AdFrontRequest::set_user_id(const char* value) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(value);
}
inline void AdFrontRequest::set_user_id(const char* value, size_t size) {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  user_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontRequest::mutable_user_id() {
  set_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    user_id_ = new ::std::string;
  }
  return user_id_;
}
inline ::std::string* AdFrontRequest::release_user_id() {
  clear_has_user_id();
  if (user_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_id_;
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontRequest::set_allocated_user_id(::std::string* user_id) {
  if (user_id_ != &::google::protobuf::internal::kEmptyString) {
    delete user_id_;
  }
  if (user_id) {
    set_has_user_id();
    user_id_ = user_id;
  } else {
    clear_has_user_id();
    user_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AdEngineFront.AdFrontRequest.PageInfo page_info = 5;
inline bool AdFrontRequest::has_page_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontRequest::set_has_page_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontRequest::clear_has_page_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontRequest::clear_page_info() {
  if (page_info_ != NULL) page_info_->::AdEngineFront::AdFrontRequest_PageInfo::Clear();
  clear_has_page_info();
}
inline const ::AdEngineFront::AdFrontRequest_PageInfo& AdFrontRequest::page_info() const {
  return page_info_ != NULL ? *page_info_ : *default_instance_->page_info_;
}
inline ::AdEngineFront::AdFrontRequest_PageInfo* AdFrontRequest::mutable_page_info() {
  set_has_page_info();
  if (page_info_ == NULL) page_info_ = new ::AdEngineFront::AdFrontRequest_PageInfo;
  return page_info_;
}
inline ::AdEngineFront::AdFrontRequest_PageInfo* AdFrontRequest::release_page_info() {
  clear_has_page_info();
  ::AdEngineFront::AdFrontRequest_PageInfo* temp = page_info_;
  page_info_ = NULL;
  return temp;
}
inline void AdFrontRequest::set_allocated_page_info(::AdEngineFront::AdFrontRequest_PageInfo* page_info) {
  delete page_info_;
  page_info_ = page_info;
  if (page_info) {
    set_has_page_info();
  } else {
    clear_has_page_info();
  }
}

// optional .AdEngineFront.AdFrontRequest.Mobile mobile = 6;
inline bool AdFrontRequest::has_mobile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdFrontRequest::set_has_mobile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdFrontRequest::clear_has_mobile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdFrontRequest::clear_mobile() {
  if (mobile_ != NULL) mobile_->::AdEngineFront::AdFrontRequest_Mobile::Clear();
  clear_has_mobile();
}
inline const ::AdEngineFront::AdFrontRequest_Mobile& AdFrontRequest::mobile() const {
  return mobile_ != NULL ? *mobile_ : *default_instance_->mobile_;
}
inline ::AdEngineFront::AdFrontRequest_Mobile* AdFrontRequest::mutable_mobile() {
  set_has_mobile();
  if (mobile_ == NULL) mobile_ = new ::AdEngineFront::AdFrontRequest_Mobile;
  return mobile_;
}
inline ::AdEngineFront::AdFrontRequest_Mobile* AdFrontRequest::release_mobile() {
  clear_has_mobile();
  ::AdEngineFront::AdFrontRequest_Mobile* temp = mobile_;
  mobile_ = NULL;
  return temp;
}
inline void AdFrontRequest::set_allocated_mobile(::AdEngineFront::AdFrontRequest_Mobile* mobile) {
  delete mobile_;
  mobile_ = mobile;
  if (mobile) {
    set_has_mobile();
  } else {
    clear_has_mobile();
  }
}

// repeated .AdEngineFront.AdFrontRequest.PositionInfo position_info = 7;
inline int AdFrontRequest::position_info_size() const {
  return position_info_.size();
}
inline void AdFrontRequest::clear_position_info() {
  position_info_.Clear();
}
inline const ::AdEngineFront::AdFrontRequest_PositionInfo& AdFrontRequest::position_info(int index) const {
  return position_info_.Get(index);
}
inline ::AdEngineFront::AdFrontRequest_PositionInfo* AdFrontRequest::mutable_position_info(int index) {
  return position_info_.Mutable(index);
}
inline ::AdEngineFront::AdFrontRequest_PositionInfo* AdFrontRequest::add_position_info() {
  return position_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontRequest_PositionInfo >&
AdFrontRequest::position_info() const {
  return position_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontRequest_PositionInfo >*
AdFrontRequest::mutable_position_info() {
  return &position_info_;
}

// optional bool is_debug = 8 [default = false];
inline bool AdFrontRequest::has_is_debug() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdFrontRequest::set_has_is_debug() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdFrontRequest::clear_has_is_debug() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdFrontRequest::clear_is_debug() {
  is_debug_ = false;
  clear_has_is_debug();
}
inline bool AdFrontRequest::is_debug() const {
  return is_debug_;
}
inline void AdFrontRequest::set_is_debug(bool value) {
  set_has_is_debug();
  is_debug_ = value;
}

// optional uint64 carousel_random_id = 9;
inline bool AdFrontRequest::has_carousel_random_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdFrontRequest::set_has_carousel_random_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdFrontRequest::clear_has_carousel_random_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdFrontRequest::clear_carousel_random_id() {
  carousel_random_id_ = GOOGLE_ULONGLONG(0);
  clear_has_carousel_random_id();
}
inline ::google::protobuf::uint64 AdFrontRequest::carousel_random_id() const {
  return carousel_random_id_;
}
inline void AdFrontRequest::set_carousel_random_id(::google::protobuf::uint64 value) {
  set_has_carousel_random_id();
  carousel_random_id_ = value;
}

// -------------------------------------------------------------------

// AdFrontResponse_UserInfo

// repeated string user_auto_brand = 1;
inline int AdFrontResponse_UserInfo::user_auto_brand_size() const {
  return user_auto_brand_.size();
}
inline void AdFrontResponse_UserInfo::clear_user_auto_brand() {
  user_auto_brand_.Clear();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_auto_brand(int index) const {
  return user_auto_brand_.Get(index);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_auto_brand(int index) {
  return user_auto_brand_.Mutable(index);
}
inline void AdFrontResponse_UserInfo::set_user_auto_brand(int index, const ::std::string& value) {
  user_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_brand(int index, const char* value) {
  user_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_brand(int index, const char* value, size_t size) {
  user_auto_brand_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::add_user_auto_brand() {
  return user_auto_brand_.Add();
}
inline void AdFrontResponse_UserInfo::add_user_auto_brand(const ::std::string& value) {
  user_auto_brand_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_brand(const char* value) {
  user_auto_brand_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_brand(const char* value, size_t size) {
  user_auto_brand_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_UserInfo::user_auto_brand() const {
  return user_auto_brand_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_UserInfo::mutable_user_auto_brand() {
  return &user_auto_brand_;
}

// repeated string user_auto_serie = 7;
inline int AdFrontResponse_UserInfo::user_auto_serie_size() const {
  return user_auto_serie_.size();
}
inline void AdFrontResponse_UserInfo::clear_user_auto_serie() {
  user_auto_serie_.Clear();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_auto_serie(int index) const {
  return user_auto_serie_.Get(index);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_auto_serie(int index) {
  return user_auto_serie_.Mutable(index);
}
inline void AdFrontResponse_UserInfo::set_user_auto_serie(int index, const ::std::string& value) {
  user_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_serie(int index, const char* value) {
  user_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_serie(int index, const char* value, size_t size) {
  user_auto_serie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::add_user_auto_serie() {
  return user_auto_serie_.Add();
}
inline void AdFrontResponse_UserInfo::add_user_auto_serie(const ::std::string& value) {
  user_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_serie(const char* value) {
  user_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_serie(const char* value, size_t size) {
  user_auto_serie_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_UserInfo::user_auto_serie() const {
  return user_auto_serie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_UserInfo::mutable_user_auto_serie() {
  return &user_auto_serie_;
}

// repeated string user_auto_level = 2;
inline int AdFrontResponse_UserInfo::user_auto_level_size() const {
  return user_auto_level_.size();
}
inline void AdFrontResponse_UserInfo::clear_user_auto_level() {
  user_auto_level_.Clear();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_auto_level(int index) const {
  return user_auto_level_.Get(index);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_auto_level(int index) {
  return user_auto_level_.Mutable(index);
}
inline void AdFrontResponse_UserInfo::set_user_auto_level(int index, const ::std::string& value) {
  user_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_level(int index, const char* value) {
  user_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_level(int index, const char* value, size_t size) {
  user_auto_level_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::add_user_auto_level() {
  return user_auto_level_.Add();
}
inline void AdFrontResponse_UserInfo::add_user_auto_level(const ::std::string& value) {
  user_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_level(const char* value) {
  user_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_level(const char* value, size_t size) {
  user_auto_level_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_UserInfo::user_auto_level() const {
  return user_auto_level_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_UserInfo::mutable_user_auto_level() {
  return &user_auto_level_;
}

// repeated string user_auto_price = 3;
inline int AdFrontResponse_UserInfo::user_auto_price_size() const {
  return user_auto_price_.size();
}
inline void AdFrontResponse_UserInfo::clear_user_auto_price() {
  user_auto_price_.Clear();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_auto_price(int index) const {
  return user_auto_price_.Get(index);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_auto_price(int index) {
  return user_auto_price_.Mutable(index);
}
inline void AdFrontResponse_UserInfo::set_user_auto_price(int index, const ::std::string& value) {
  user_auto_price_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_price(int index, const char* value) {
  user_auto_price_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_auto_price(int index, const char* value, size_t size) {
  user_auto_price_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::add_user_auto_price() {
  return user_auto_price_.Add();
}
inline void AdFrontResponse_UserInfo::add_user_auto_price(const ::std::string& value) {
  user_auto_price_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_price(const char* value) {
  user_auto_price_.Add()->assign(value);
}
inline void AdFrontResponse_UserInfo::add_user_auto_price(const char* value, size_t size) {
  user_auto_price_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_UserInfo::user_auto_price() const {
  return user_auto_price_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_UserInfo::mutable_user_auto_price() {
  return &user_auto_price_;
}

// optional string user_province = 4;
inline bool AdFrontResponse_UserInfo::has_user_province() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontResponse_UserInfo::set_has_user_province() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontResponse_UserInfo::clear_has_user_province() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontResponse_UserInfo::clear_user_province() {
  if (user_province_ != &::google::protobuf::internal::kEmptyString) {
    user_province_->clear();
  }
  clear_has_user_province();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_province() const {
  return *user_province_;
}
inline void AdFrontResponse_UserInfo::set_user_province(const ::std::string& value) {
  set_has_user_province();
  if (user_province_ == &::google::protobuf::internal::kEmptyString) {
    user_province_ = new ::std::string;
  }
  user_province_->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_province(const char* value) {
  set_has_user_province();
  if (user_province_ == &::google::protobuf::internal::kEmptyString) {
    user_province_ = new ::std::string;
  }
  user_province_->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_province(const char* value, size_t size) {
  set_has_user_province();
  if (user_province_ == &::google::protobuf::internal::kEmptyString) {
    user_province_ = new ::std::string;
  }
  user_province_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_province() {
  set_has_user_province();
  if (user_province_ == &::google::protobuf::internal::kEmptyString) {
    user_province_ = new ::std::string;
  }
  return user_province_;
}
inline ::std::string* AdFrontResponse_UserInfo::release_user_province() {
  clear_has_user_province();
  if (user_province_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_province_;
    user_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_UserInfo::set_allocated_user_province(::std::string* user_province) {
  if (user_province_ != &::google::protobuf::internal::kEmptyString) {
    delete user_province_;
  }
  if (user_province) {
    set_has_user_province();
    user_province_ = user_province;
  } else {
    clear_has_user_province();
    user_province_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string user_city = 5;
inline bool AdFrontResponse_UserInfo::has_user_city() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdFrontResponse_UserInfo::set_has_user_city() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdFrontResponse_UserInfo::clear_has_user_city() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdFrontResponse_UserInfo::clear_user_city() {
  if (user_city_ != &::google::protobuf::internal::kEmptyString) {
    user_city_->clear();
  }
  clear_has_user_city();
}
inline const ::std::string& AdFrontResponse_UserInfo::user_city() const {
  return *user_city_;
}
inline void AdFrontResponse_UserInfo::set_user_city(const ::std::string& value) {
  set_has_user_city();
  if (user_city_ == &::google::protobuf::internal::kEmptyString) {
    user_city_ = new ::std::string;
  }
  user_city_->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_city(const char* value) {
  set_has_user_city();
  if (user_city_ == &::google::protobuf::internal::kEmptyString) {
    user_city_ = new ::std::string;
  }
  user_city_->assign(value);
}
inline void AdFrontResponse_UserInfo::set_user_city(const char* value, size_t size) {
  set_has_user_city();
  if (user_city_ == &::google::protobuf::internal::kEmptyString) {
    user_city_ = new ::std::string;
  }
  user_city_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_UserInfo::mutable_user_city() {
  set_has_user_city();
  if (user_city_ == &::google::protobuf::internal::kEmptyString) {
    user_city_ = new ::std::string;
  }
  return user_city_;
}
inline ::std::string* AdFrontResponse_UserInfo::release_user_city() {
  clear_has_user_city();
  if (user_city_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_city_;
    user_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_UserInfo::set_allocated_user_city(::std::string* user_city) {
  if (user_city_ != &::google::protobuf::internal::kEmptyString) {
    delete user_city_;
  }
  if (user_city) {
    set_has_user_city();
    user_city_ = user_city;
  } else {
    clear_has_user_city();
    user_city_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget

// repeated string mobile_platform = 1;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_platform_size() const {
  return mobile_platform_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_mobile_platform() {
  mobile_platform_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_platform(int index) const {
  return mobile_platform_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_mobile_platform(int index) {
  return mobile_platform_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_platform(int index, const ::std::string& value) {
  mobile_platform_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_platform(int index, const char* value) {
  mobile_platform_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_platform(int index, const char* value, size_t size) {
  mobile_platform_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_platform() {
  return mobile_platform_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_platform(const ::std::string& value) {
  mobile_platform_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_platform(const char* value) {
  mobile_platform_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_platform(const char* value, size_t size) {
  mobile_platform_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_platform() const {
  return mobile_platform_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_mobile_platform() {
  return &mobile_platform_;
}

// repeated string mobile_connection_type = 2;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_connection_type_size() const {
  return mobile_connection_type_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_mobile_connection_type() {
  mobile_connection_type_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_connection_type(int index) const {
  return mobile_connection_type_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_mobile_connection_type(int index) {
  return mobile_connection_type_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_connection_type(int index, const ::std::string& value) {
  mobile_connection_type_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_connection_type(int index, const char* value) {
  mobile_connection_type_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_mobile_connection_type(int index, const char* value, size_t size) {
  mobile_connection_type_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_connection_type() {
  return mobile_connection_type_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_connection_type(const ::std::string& value) {
  mobile_connection_type_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_connection_type(const char* value) {
  mobile_connection_type_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_mobile_connection_type(const char* value, size_t size) {
  mobile_connection_type_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mobile_connection_type() const {
  return mobile_connection_type_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_mobile_connection_type() {
  return &mobile_connection_type_;
}

// repeated string page_delivery_hour = 3;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_delivery_hour_size() const {
  return page_delivery_hour_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_delivery_hour() {
  page_delivery_hour_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_delivery_hour(int index) const {
  return page_delivery_hour_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_delivery_hour(int index) {
  return page_delivery_hour_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_delivery_hour(int index, const ::std::string& value) {
  page_delivery_hour_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_delivery_hour(int index, const char* value) {
  page_delivery_hour_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_delivery_hour(int index, const char* value, size_t size) {
  page_delivery_hour_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_delivery_hour() {
  return page_delivery_hour_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_delivery_hour(const ::std::string& value) {
  page_delivery_hour_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_delivery_hour(const char* value) {
  page_delivery_hour_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_delivery_hour(const char* value, size_t size) {
  page_delivery_hour_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_delivery_hour() const {
  return page_delivery_hour_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_delivery_hour() {
  return &page_delivery_hour_;
}

// repeated string page_province = 4;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_province_size() const {
  return page_province_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_province() {
  page_province_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_province(int index) const {
  return page_province_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_province(int index) {
  return page_province_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_province(int index, const ::std::string& value) {
  page_province_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_province(int index, const char* value) {
  page_province_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_province(int index, const char* value, size_t size) {
  page_province_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_province() {
  return page_province_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_province(const ::std::string& value) {
  page_province_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_province(const char* value) {
  page_province_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_province(const char* value, size_t size) {
  page_province_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_province() const {
  return page_province_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_province() {
  return &page_province_;
}

// repeated string page_city = 5;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_city_size() const {
  return page_city_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_city() {
  page_city_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_city(int index) const {
  return page_city_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_city(int index) {
  return page_city_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_city(int index, const ::std::string& value) {
  page_city_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_city(int index, const char* value) {
  page_city_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_city(int index, const char* value, size_t size) {
  page_city_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_city() {
  return page_city_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_city(const ::std::string& value) {
  page_city_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_city(const char* value) {
  page_city_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_city(const char* value, size_t size) {
  page_city_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_city() const {
  return page_city_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_city() {
  return &page_city_;
}

// repeated string page_auto_brand = 6;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_brand_size() const {
  return page_auto_brand_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_auto_brand() {
  page_auto_brand_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_brand(int index) const {
  return page_auto_brand_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_brand(int index) {
  return page_auto_brand_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_brand(int index, const ::std::string& value) {
  page_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_brand(int index, const char* value) {
  page_auto_brand_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_brand(int index, const char* value, size_t size) {
  page_auto_brand_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_brand() {
  return page_auto_brand_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_brand(const ::std::string& value) {
  page_auto_brand_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_brand(const char* value) {
  page_auto_brand_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_brand(const char* value, size_t size) {
  page_auto_brand_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_brand() const {
  return page_auto_brand_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_brand() {
  return &page_auto_brand_;
}

// repeated string page_auto_serie = 7;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_serie_size() const {
  return page_auto_serie_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_auto_serie() {
  page_auto_serie_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_serie(int index) const {
  return page_auto_serie_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_serie(int index) {
  return page_auto_serie_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_serie(int index, const ::std::string& value) {
  page_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_serie(int index, const char* value) {
  page_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_serie(int index, const char* value, size_t size) {
  page_auto_serie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_serie() {
  return page_auto_serie_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_serie(const ::std::string& value) {
  page_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_serie(const char* value) {
  page_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_serie(const char* value, size_t size) {
  page_auto_serie_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_serie() const {
  return page_auto_serie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_serie() {
  return &page_auto_serie_;
}

// repeated string page_auto_level = 8;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_level_size() const {
  return page_auto_level_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_page_auto_level() {
  page_auto_level_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_level(int index) const {
  return page_auto_level_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_level(int index) {
  return page_auto_level_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_level(int index, const ::std::string& value) {
  page_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_level(int index, const char* value) {
  page_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_page_auto_level(int index, const char* value, size_t size) {
  page_auto_level_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_level() {
  return page_auto_level_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_level(const ::std::string& value) {
  page_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_level(const char* value) {
  page_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_page_auto_level(const char* value, size_t size) {
  page_auto_level_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::page_auto_level() const {
  return page_auto_level_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_page_auto_level() {
  return &page_auto_level_;
}

// repeated string user_auto_serie = 10;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_serie_size() const {
  return user_auto_serie_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_user_auto_serie() {
  user_auto_serie_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_serie(int index) const {
  return user_auto_serie_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_serie(int index) {
  return user_auto_serie_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_serie(int index, const ::std::string& value) {
  user_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_serie(int index, const char* value) {
  user_auto_serie_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_serie(int index, const char* value, size_t size) {
  user_auto_serie_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_serie() {
  return user_auto_serie_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_serie(const ::std::string& value) {
  user_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_serie(const char* value) {
  user_auto_serie_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_serie(const char* value, size_t size) {
  user_auto_serie_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_serie() const {
  return user_auto_serie_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_serie() {
  return &user_auto_serie_;
}

// repeated string user_auto_level = 11;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_level_size() const {
  return user_auto_level_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_user_auto_level() {
  user_auto_level_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_level(int index) const {
  return user_auto_level_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_level(int index) {
  return user_auto_level_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_level(int index, const ::std::string& value) {
  user_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_level(int index, const char* value) {
  user_auto_level_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_level(int index, const char* value, size_t size) {
  user_auto_level_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_level() {
  return user_auto_level_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_level(const ::std::string& value) {
  user_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_level(const char* value) {
  user_auto_level_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_level(const char* value, size_t size) {
  user_auto_level_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_level() const {
  return user_auto_level_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_level() {
  return &user_auto_level_;
}

// repeated string user_auto_price = 12;
inline int AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_price_size() const {
  return user_auto_price_.size();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::clear_user_auto_price() {
  user_auto_price_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_price(int index) const {
  return user_auto_price_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_price(int index) {
  return user_auto_price_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_price(int index, const ::std::string& value) {
  user_auto_price_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_price(int index, const char* value) {
  user_auto_price_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::set_user_auto_price(int index, const char* value, size_t size) {
  user_auto_price_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_price() {
  return user_auto_price_.Add();
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_price(const ::std::string& value) {
  user_auto_price_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_price(const char* value) {
  user_auto_price_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::add_user_auto_price(const char* value, size_t size) {
  user_auto_price_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::user_auto_price() const {
  return user_auto_price_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::mutable_user_auto_price() {
  return &user_auto_price_;
}

// -------------------------------------------------------------------

// AdFrontResponse_PositionInfo_CreativeInfo

// required uint64 creative_id = 1;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_id() {
  creative_id_ = GOOGLE_ULONGLONG(0);
  clear_has_creative_id();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo_CreativeInfo::creative_id() const {
  return creative_id_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_id(::google::protobuf::uint64 value) {
  set_has_creative_id();
  creative_id_ = value;
}

// optional string creative_type = 2;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_type() {
  if (creative_type_ != &::google::protobuf::internal::kEmptyString) {
    creative_type_->clear();
  }
  clear_has_creative_type();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::creative_type() const {
  return *creative_type_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_type(const ::std::string& value) {
  set_has_creative_type();
  if (creative_type_ == &::google::protobuf::internal::kEmptyString) {
    creative_type_ = new ::std::string;
  }
  creative_type_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_type(const char* value) {
  set_has_creative_type();
  if (creative_type_ == &::google::protobuf::internal::kEmptyString) {
    creative_type_ = new ::std::string;
  }
  creative_type_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_type(const char* value, size_t size) {
  set_has_creative_type();
  if (creative_type_ == &::google::protobuf::internal::kEmptyString) {
    creative_type_ = new ::std::string;
  }
  creative_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_creative_type() {
  set_has_creative_type();
  if (creative_type_ == &::google::protobuf::internal::kEmptyString) {
    creative_type_ = new ::std::string;
  }
  return creative_type_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_creative_type() {
  clear_has_creative_type();
  if (creative_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_type_;
    creative_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_creative_type(::std::string* creative_type) {
  if (creative_type_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_type_;
  }
  if (creative_type) {
    set_has_creative_type();
    creative_type_ = creative_type;
  } else {
    clear_has_creative_type();
    creative_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string creative_size = 3;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_size() {
  if (creative_size_ != &::google::protobuf::internal::kEmptyString) {
    creative_size_->clear();
  }
  clear_has_creative_size();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::creative_size() const {
  return *creative_size_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_size(const ::std::string& value) {
  set_has_creative_size();
  if (creative_size_ == &::google::protobuf::internal::kEmptyString) {
    creative_size_ = new ::std::string;
  }
  creative_size_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_size(const char* value) {
  set_has_creative_size();
  if (creative_size_ == &::google::protobuf::internal::kEmptyString) {
    creative_size_ = new ::std::string;
  }
  creative_size_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_size(const char* value, size_t size) {
  set_has_creative_size();
  if (creative_size_ == &::google::protobuf::internal::kEmptyString) {
    creative_size_ = new ::std::string;
  }
  creative_size_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_creative_size() {
  set_has_creative_size();
  if (creative_size_ == &::google::protobuf::internal::kEmptyString) {
    creative_size_ = new ::std::string;
  }
  return creative_size_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_creative_size() {
  clear_has_creative_size();
  if (creative_size_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_size_;
    creative_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_creative_size(::std::string* creative_size) {
  if (creative_size_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_size_;
  }
  if (creative_size) {
    set_has_creative_size();
    creative_size_ = creative_size;
  } else {
    clear_has_creative_size();
    creative_size_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width_height = 4;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_width_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_width_height() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_width_height() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_width_height() {
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    width_height_->clear();
  }
  clear_has_width_height();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::width_height() const {
  return *width_height_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_width_height(const ::std::string& value) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_width_height(const char* value) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_width_height(const char* value, size_t size) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_width_height() {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  return width_height_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_width_height() {
  clear_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_height_;
    width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_width_height(::std::string* width_height) {
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    delete width_height_;
  }
  if (width_height) {
    set_has_width_height();
    width_height_ = width_height;
  } else {
    clear_has_width_height();
    width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string word_chain_len = 5;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_word_chain_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_word_chain_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_word_chain_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_word_chain_len() {
  if (word_chain_len_ != &::google::protobuf::internal::kEmptyString) {
    word_chain_len_->clear();
  }
  clear_has_word_chain_len();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::word_chain_len() const {
  return *word_chain_len_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_word_chain_len(const ::std::string& value) {
  set_has_word_chain_len();
  if (word_chain_len_ == &::google::protobuf::internal::kEmptyString) {
    word_chain_len_ = new ::std::string;
  }
  word_chain_len_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_word_chain_len(const char* value) {
  set_has_word_chain_len();
  if (word_chain_len_ == &::google::protobuf::internal::kEmptyString) {
    word_chain_len_ = new ::std::string;
  }
  word_chain_len_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_word_chain_len(const char* value, size_t size) {
  set_has_word_chain_len();
  if (word_chain_len_ == &::google::protobuf::internal::kEmptyString) {
    word_chain_len_ = new ::std::string;
  }
  word_chain_len_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_word_chain_len() {
  set_has_word_chain_len();
  if (word_chain_len_ == &::google::protobuf::internal::kEmptyString) {
    word_chain_len_ = new ::std::string;
  }
  return word_chain_len_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_word_chain_len() {
  clear_has_word_chain_len();
  if (word_chain_len_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_chain_len_;
    word_chain_len_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_word_chain_len(::std::string* word_chain_len) {
  if (word_chain_len_ != &::google::protobuf::internal::kEmptyString) {
    delete word_chain_len_;
  }
  if (word_chain_len) {
    set_has_word_chain_len();
    word_chain_len_ = word_chain_len;
  } else {
    clear_has_word_chain_len();
    word_chain_len_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sell_model = 6;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_sell_model() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_sell_model() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_sell_model() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_sell_model() {
  if (sell_model_ != &::google::protobuf::internal::kEmptyString) {
    sell_model_->clear();
  }
  clear_has_sell_model();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::sell_model() const {
  return *sell_model_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_sell_model(const ::std::string& value) {
  set_has_sell_model();
  if (sell_model_ == &::google::protobuf::internal::kEmptyString) {
    sell_model_ = new ::std::string;
  }
  sell_model_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_sell_model(const char* value) {
  set_has_sell_model();
  if (sell_model_ == &::google::protobuf::internal::kEmptyString) {
    sell_model_ = new ::std::string;
  }
  sell_model_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_sell_model(const char* value, size_t size) {
  set_has_sell_model();
  if (sell_model_ == &::google::protobuf::internal::kEmptyString) {
    sell_model_ = new ::std::string;
  }
  sell_model_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_sell_model() {
  set_has_sell_model();
  if (sell_model_ == &::google::protobuf::internal::kEmptyString) {
    sell_model_ = new ::std::string;
  }
  return sell_model_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_sell_model() {
  clear_has_sell_model();
  if (sell_model_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sell_model_;
    sell_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_sell_model(::std::string* sell_model) {
  if (sell_model_ != &::google::protobuf::internal::kEmptyString) {
    delete sell_model_;
  }
  if (sell_model) {
    set_has_sell_model();
    sell_model_ = sell_model;
  } else {
    clear_has_sell_model();
    sell_model_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bool is_internal = 7;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_is_internal() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_is_internal() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_is_internal() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_is_internal() {
  is_internal_ = false;
  clear_has_is_internal();
}
inline bool AdFrontResponse_PositionInfo_CreativeInfo::is_internal() const {
  return is_internal_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_is_internal(bool value) {
  set_has_is_internal();
  is_internal_ = value;
}

// optional uint64 order_id = 8;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_order_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_order_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_order_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_order_id() {
  order_id_ = GOOGLE_ULONGLONG(0);
  clear_has_order_id();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo_CreativeInfo::order_id() const {
  return order_id_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_order_id(::google::protobuf::uint64 value) {
  set_has_order_id();
  order_id_ = value;
}

// optional uint64 campaign_id = 9;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_campaign_id() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_campaign_id() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_campaign_id() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_campaign_id() {
  campaign_id_ = GOOGLE_ULONGLONG(0);
  clear_has_campaign_id();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo_CreativeInfo::campaign_id() const {
  return campaign_id_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_campaign_id(::google::protobuf::uint64 value) {
  set_has_campaign_id();
  campaign_id_ = value;
}

// optional uint64 group_id = 10;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_group_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_group_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_group_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_group_id() {
  group_id_ = GOOGLE_ULONGLONG(0);
  clear_has_group_id();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo_CreativeInfo::group_id() const {
  return group_id_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_group_id(::google::protobuf::uint64 value) {
  set_has_group_id();
  group_id_ = value;
}

// optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo.CreativeTarget creative_target = 11;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_target() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_target() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_target() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_target() {
  if (creative_target_ != NULL) creative_target_->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget::Clear();
  clear_has_creative_target();
}
inline const ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget& AdFrontResponse_PositionInfo_CreativeInfo::creative_target() const {
  return creative_target_ != NULL ? *creative_target_ : *default_instance_->creative_target_;
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* AdFrontResponse_PositionInfo_CreativeInfo::mutable_creative_target() {
  set_has_creative_target();
  if (creative_target_ == NULL) creative_target_ = new ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget;
  return creative_target_;
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* AdFrontResponse_PositionInfo_CreativeInfo::release_creative_target() {
  clear_has_creative_target();
  ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* temp = creative_target_;
  creative_target_ = NULL;
  return temp;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_creative_target(::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo_CreativeTarget* creative_target) {
  delete creative_target_;
  creative_target_ = creative_target;
  if (creative_target) {
    set_has_creative_target();
  } else {
    clear_has_creative_target();
  }
}

// optional string creative_html = 12;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_html() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_html() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_html() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_html() {
  if (creative_html_ != &::google::protobuf::internal::kEmptyString) {
    creative_html_->clear();
  }
  clear_has_creative_html();
}
inline const ::std::string& AdFrontResponse_PositionInfo_CreativeInfo::creative_html() const {
  return *creative_html_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_html(const ::std::string& value) {
  set_has_creative_html();
  if (creative_html_ == &::google::protobuf::internal::kEmptyString) {
    creative_html_ = new ::std::string;
  }
  creative_html_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_html(const char* value) {
  set_has_creative_html();
  if (creative_html_ == &::google::protobuf::internal::kEmptyString) {
    creative_html_ = new ::std::string;
  }
  creative_html_->assign(value);
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_html(const char* value, size_t size) {
  set_has_creative_html();
  if (creative_html_ == &::google::protobuf::internal::kEmptyString) {
    creative_html_ = new ::std::string;
  }
  creative_html_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::mutable_creative_html() {
  set_has_creative_html();
  if (creative_html_ == &::google::protobuf::internal::kEmptyString) {
    creative_html_ = new ::std::string;
  }
  return creative_html_;
}
inline ::std::string* AdFrontResponse_PositionInfo_CreativeInfo::release_creative_html() {
  clear_has_creative_html();
  if (creative_html_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creative_html_;
    creative_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_allocated_creative_html(::std::string* creative_html) {
  if (creative_html_ != &::google::protobuf::internal::kEmptyString) {
    delete creative_html_;
  }
  if (creative_html) {
    set_has_creative_html();
    creative_html_ = creative_html;
  } else {
    clear_has_creative_html();
    creative_html_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional float creative_ecpm = 13;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_ecpm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_ecpm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_ecpm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_ecpm() {
  creative_ecpm_ = 0;
  clear_has_creative_ecpm();
}
inline float AdFrontResponse_PositionInfo_CreativeInfo::creative_ecpm() const {
  return creative_ecpm_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_ecpm(float value) {
  set_has_creative_ecpm();
  creative_ecpm_ = value;
}

// optional uint64 creative_column = 14;
inline bool AdFrontResponse_PositionInfo_CreativeInfo::has_creative_column() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_has_creative_column() {
  _has_bits_[0] |= 0x00002000u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_has_creative_column() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::clear_creative_column() {
  creative_column_ = GOOGLE_ULONGLONG(0);
  clear_has_creative_column();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo_CreativeInfo::creative_column() const {
  return creative_column_;
}
inline void AdFrontResponse_PositionInfo_CreativeInfo::set_creative_column(::google::protobuf::uint64 value) {
  set_has_creative_column();
  creative_column_ = value;
}

// -------------------------------------------------------------------

// AdFrontResponse_PositionInfo

// required uint64 position_id = 1;
inline bool AdFrontResponse_PositionInfo::has_position_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_position_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontResponse_PositionInfo::clear_has_position_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontResponse_PositionInfo::clear_position_id() {
  position_id_ = GOOGLE_ULONGLONG(0);
  clear_has_position_id();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo::position_id() const {
  return position_id_;
}
inline void AdFrontResponse_PositionInfo::set_position_id(::google::protobuf::uint64 value) {
  set_has_position_id();
  position_id_ = value;
}

// optional string pv_id = 2;
inline bool AdFrontResponse_PositionInfo::has_pv_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_pv_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontResponse_PositionInfo::clear_has_pv_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontResponse_PositionInfo::clear_pv_id() {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    pv_id_->clear();
  }
  clear_has_pv_id();
}
inline const ::std::string& AdFrontResponse_PositionInfo::pv_id() const {
  return *pv_id_;
}
inline void AdFrontResponse_PositionInfo::set_pv_id(const ::std::string& value) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_pv_id(const char* value) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_pv_id(const char* value, size_t size) {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  pv_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_pv_id() {
  set_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    pv_id_ = new ::std::string;
  }
  return pv_id_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_pv_id() {
  clear_has_pv_id();
  if (pv_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pv_id_;
    pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_pv_id(::std::string* pv_id) {
  if (pv_id_ != &::google::protobuf::internal::kEmptyString) {
    delete pv_id_;
  }
  if (pv_id) {
    set_has_pv_id();
    pv_id_ = pv_id;
  } else {
    clear_has_pv_id();
    pv_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string sell_model = 3;
inline int AdFrontResponse_PositionInfo::sell_model_size() const {
  return sell_model_.size();
}
inline void AdFrontResponse_PositionInfo::clear_sell_model() {
  sell_model_.Clear();
}
inline const ::std::string& AdFrontResponse_PositionInfo::sell_model(int index) const {
  return sell_model_.Get(index);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_sell_model(int index) {
  return sell_model_.Mutable(index);
}
inline void AdFrontResponse_PositionInfo::set_sell_model(int index, const ::std::string& value) {
  sell_model_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_sell_model(int index, const char* value) {
  sell_model_.Mutable(index)->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_sell_model(int index, const char* value, size_t size) {
  sell_model_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::add_sell_model() {
  return sell_model_.Add();
}
inline void AdFrontResponse_PositionInfo::add_sell_model(const ::std::string& value) {
  sell_model_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo::add_sell_model(const char* value) {
  sell_model_.Add()->assign(value);
}
inline void AdFrontResponse_PositionInfo::add_sell_model(const char* value, size_t size) {
  sell_model_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdFrontResponse_PositionInfo::sell_model() const {
  return sell_model_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdFrontResponse_PositionInfo::mutable_sell_model() {
  return &sell_model_;
}

// optional .AdEngineFront.AdFrontResponse.PositionInfo.CreativeInfo creative_info = 4;
inline bool AdFrontResponse_PositionInfo::has_creative_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_creative_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontResponse_PositionInfo::clear_has_creative_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontResponse_PositionInfo::clear_creative_info() {
  if (creative_info_ != NULL) creative_info_->::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo::Clear();
  clear_has_creative_info();
}
inline const ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo& AdFrontResponse_PositionInfo::creative_info() const {
  return creative_info_ != NULL ? *creative_info_ : *default_instance_->creative_info_;
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* AdFrontResponse_PositionInfo::mutable_creative_info() {
  set_has_creative_info();
  if (creative_info_ == NULL) creative_info_ = new ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo;
  return creative_info_;
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* AdFrontResponse_PositionInfo::release_creative_info() {
  clear_has_creative_info();
  ::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* temp = creative_info_;
  creative_info_ = NULL;
  return temp;
}
inline void AdFrontResponse_PositionInfo::set_allocated_creative_info(::AdEngineFront::AdFrontResponse_PositionInfo_CreativeInfo* creative_info) {
  delete creative_info_;
  creative_info_ = creative_info;
  if (creative_info) {
    set_has_creative_info();
  } else {
    clear_has_creative_info();
  }
}

// optional string request_path = 5;
inline bool AdFrontResponse_PositionInfo::has_request_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_request_path() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontResponse_PositionInfo::clear_has_request_path() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontResponse_PositionInfo::clear_request_path() {
  if (request_path_ != &::google::protobuf::internal::kEmptyString) {
    request_path_->clear();
  }
  clear_has_request_path();
}
inline const ::std::string& AdFrontResponse_PositionInfo::request_path() const {
  return *request_path_;
}
inline void AdFrontResponse_PositionInfo::set_request_path(const ::std::string& value) {
  set_has_request_path();
  if (request_path_ == &::google::protobuf::internal::kEmptyString) {
    request_path_ = new ::std::string;
  }
  request_path_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_request_path(const char* value) {
  set_has_request_path();
  if (request_path_ == &::google::protobuf::internal::kEmptyString) {
    request_path_ = new ::std::string;
  }
  request_path_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_request_path(const char* value, size_t size) {
  set_has_request_path();
  if (request_path_ == &::google::protobuf::internal::kEmptyString) {
    request_path_ = new ::std::string;
  }
  request_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_request_path() {
  set_has_request_path();
  if (request_path_ == &::google::protobuf::internal::kEmptyString) {
    request_path_ = new ::std::string;
  }
  return request_path_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_request_path() {
  clear_has_request_path();
  if (request_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_path_;
    request_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_request_path(::std::string* request_path) {
  if (request_path_ != &::google::protobuf::internal::kEmptyString) {
    delete request_path_;
  }
  if (request_path) {
    set_has_request_path();
    request_path_ = request_path;
  } else {
    clear_has_request_path();
    request_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string rank_path = 6;
inline bool AdFrontResponse_PositionInfo::has_rank_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_rank_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AdFrontResponse_PositionInfo::clear_has_rank_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AdFrontResponse_PositionInfo::clear_rank_path() {
  if (rank_path_ != &::google::protobuf::internal::kEmptyString) {
    rank_path_->clear();
  }
  clear_has_rank_path();
}
inline const ::std::string& AdFrontResponse_PositionInfo::rank_path() const {
  return *rank_path_;
}
inline void AdFrontResponse_PositionInfo::set_rank_path(const ::std::string& value) {
  set_has_rank_path();
  if (rank_path_ == &::google::protobuf::internal::kEmptyString) {
    rank_path_ = new ::std::string;
  }
  rank_path_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_rank_path(const char* value) {
  set_has_rank_path();
  if (rank_path_ == &::google::protobuf::internal::kEmptyString) {
    rank_path_ = new ::std::string;
  }
  rank_path_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_rank_path(const char* value, size_t size) {
  set_has_rank_path();
  if (rank_path_ == &::google::protobuf::internal::kEmptyString) {
    rank_path_ = new ::std::string;
  }
  rank_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_rank_path() {
  set_has_rank_path();
  if (rank_path_ == &::google::protobuf::internal::kEmptyString) {
    rank_path_ = new ::std::string;
  }
  return rank_path_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_rank_path() {
  clear_has_rank_path();
  if (rank_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rank_path_;
    rank_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_rank_path(::std::string* rank_path) {
  if (rank_path_ != &::google::protobuf::internal::kEmptyString) {
    delete rank_path_;
  }
  if (rank_path) {
    set_has_rank_path();
    rank_path_ = rank_path;
  } else {
    clear_has_rank_path();
    rank_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string position_label = 7;
inline bool AdFrontResponse_PositionInfo::has_position_label() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_position_label() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AdFrontResponse_PositionInfo::clear_has_position_label() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AdFrontResponse_PositionInfo::clear_position_label() {
  if (position_label_ != &::google::protobuf::internal::kEmptyString) {
    position_label_->clear();
  }
  clear_has_position_label();
}
inline const ::std::string& AdFrontResponse_PositionInfo::position_label() const {
  return *position_label_;
}
inline void AdFrontResponse_PositionInfo::set_position_label(const ::std::string& value) {
  set_has_position_label();
  if (position_label_ == &::google::protobuf::internal::kEmptyString) {
    position_label_ = new ::std::string;
  }
  position_label_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_position_label(const char* value) {
  set_has_position_label();
  if (position_label_ == &::google::protobuf::internal::kEmptyString) {
    position_label_ = new ::std::string;
  }
  position_label_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_position_label(const char* value, size_t size) {
  set_has_position_label();
  if (position_label_ == &::google::protobuf::internal::kEmptyString) {
    position_label_ = new ::std::string;
  }
  position_label_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_position_label() {
  set_has_position_label();
  if (position_label_ == &::google::protobuf::internal::kEmptyString) {
    position_label_ = new ::std::string;
  }
  return position_label_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_position_label() {
  clear_has_position_label();
  if (position_label_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = position_label_;
    position_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_position_label(::std::string* position_label) {
  if (position_label_ != &::google::protobuf::internal::kEmptyString) {
    delete position_label_;
  }
  if (position_label) {
    set_has_position_label();
    position_label_ = position_label;
  } else {
    clear_has_position_label();
    position_label_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 carouselid = 8;
inline bool AdFrontResponse_PositionInfo::has_carouselid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_carouselid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AdFrontResponse_PositionInfo::clear_has_carouselid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AdFrontResponse_PositionInfo::clear_carouselid() {
  carouselid_ = GOOGLE_ULONGLONG(0);
  clear_has_carouselid();
}
inline ::google::protobuf::uint64 AdFrontResponse_PositionInfo::carouselid() const {
  return carouselid_;
}
inline void AdFrontResponse_PositionInfo::set_carouselid(::google::protobuf::uint64 value) {
  set_has_carouselid();
  carouselid_ = value;
}

// optional string algo_detail = 9;
inline bool AdFrontResponse_PositionInfo::has_algo_detail() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_algo_detail() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AdFrontResponse_PositionInfo::clear_has_algo_detail() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AdFrontResponse_PositionInfo::clear_algo_detail() {
  if (algo_detail_ != &::google::protobuf::internal::kEmptyString) {
    algo_detail_->clear();
  }
  clear_has_algo_detail();
}
inline const ::std::string& AdFrontResponse_PositionInfo::algo_detail() const {
  return *algo_detail_;
}
inline void AdFrontResponse_PositionInfo::set_algo_detail(const ::std::string& value) {
  set_has_algo_detail();
  if (algo_detail_ == &::google::protobuf::internal::kEmptyString) {
    algo_detail_ = new ::std::string;
  }
  algo_detail_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_algo_detail(const char* value) {
  set_has_algo_detail();
  if (algo_detail_ == &::google::protobuf::internal::kEmptyString) {
    algo_detail_ = new ::std::string;
  }
  algo_detail_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_algo_detail(const char* value, size_t size) {
  set_has_algo_detail();
  if (algo_detail_ == &::google::protobuf::internal::kEmptyString) {
    algo_detail_ = new ::std::string;
  }
  algo_detail_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_algo_detail() {
  set_has_algo_detail();
  if (algo_detail_ == &::google::protobuf::internal::kEmptyString) {
    algo_detail_ = new ::std::string;
  }
  return algo_detail_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_algo_detail() {
  clear_has_algo_detail();
  if (algo_detail_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algo_detail_;
    algo_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_algo_detail(::std::string* algo_detail) {
  if (algo_detail_ != &::google::protobuf::internal::kEmptyString) {
    delete algo_detail_;
  }
  if (algo_detail) {
    set_has_algo_detail();
    algo_detail_ = algo_detail;
  } else {
    clear_has_algo_detail();
    algo_detail_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string width_height = 10;
inline bool AdFrontResponse_PositionInfo::has_width_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AdFrontResponse_PositionInfo::set_has_width_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AdFrontResponse_PositionInfo::clear_has_width_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AdFrontResponse_PositionInfo::clear_width_height() {
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    width_height_->clear();
  }
  clear_has_width_height();
}
inline const ::std::string& AdFrontResponse_PositionInfo::width_height() const {
  return *width_height_;
}
inline void AdFrontResponse_PositionInfo::set_width_height(const ::std::string& value) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_width_height(const char* value) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(value);
}
inline void AdFrontResponse_PositionInfo::set_width_height(const char* value, size_t size) {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  width_height_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse_PositionInfo::mutable_width_height() {
  set_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    width_height_ = new ::std::string;
  }
  return width_height_;
}
inline ::std::string* AdFrontResponse_PositionInfo::release_width_height() {
  clear_has_width_height();
  if (width_height_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = width_height_;
    width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse_PositionInfo::set_allocated_width_height(::std::string* width_height) {
  if (width_height_ != &::google::protobuf::internal::kEmptyString) {
    delete width_height_;
  }
  if (width_height) {
    set_has_width_height();
    width_height_ = width_height;
  } else {
    clear_has_width_height();
    width_height_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// AdFrontResponse

// required string req_id = 1;
inline bool AdFrontResponse::has_req_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AdFrontResponse::set_has_req_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AdFrontResponse::clear_has_req_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AdFrontResponse::clear_req_id() {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    req_id_->clear();
  }
  clear_has_req_id();
}
inline const ::std::string& AdFrontResponse::req_id() const {
  return *req_id_;
}
inline void AdFrontResponse::set_req_id(const ::std::string& value) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(value);
}
inline void AdFrontResponse::set_req_id(const char* value) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(value);
}
inline void AdFrontResponse::set_req_id(const char* value, size_t size) {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  req_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse::mutable_req_id() {
  set_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    req_id_ = new ::std::string;
  }
  return req_id_;
}
inline ::std::string* AdFrontResponse::release_req_id() {
  clear_has_req_id();
  if (req_id_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = req_id_;
    req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse::set_allocated_req_id(::std::string* req_id) {
  if (req_id_ != &::google::protobuf::internal::kEmptyString) {
    delete req_id_;
  }
  if (req_id) {
    set_has_req_id();
    req_id_ = req_id;
  } else {
    clear_has_req_id();
    req_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AdEngineFront.AdFrontResponse.UserInfo user_info = 2;
inline bool AdFrontResponse::has_user_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AdFrontResponse::set_has_user_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AdFrontResponse::clear_has_user_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AdFrontResponse::clear_user_info() {
  if (user_info_ != NULL) user_info_->::AdEngineFront::AdFrontResponse_UserInfo::Clear();
  clear_has_user_info();
}
inline const ::AdEngineFront::AdFrontResponse_UserInfo& AdFrontResponse::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::AdEngineFront::AdFrontResponse_UserInfo* AdFrontResponse::mutable_user_info() {
  set_has_user_info();
  if (user_info_ == NULL) user_info_ = new ::AdEngineFront::AdFrontResponse_UserInfo;
  return user_info_;
}
inline ::AdEngineFront::AdFrontResponse_UserInfo* AdFrontResponse::release_user_info() {
  clear_has_user_info();
  ::AdEngineFront::AdFrontResponse_UserInfo* temp = user_info_;
  user_info_ = NULL;
  return temp;
}
inline void AdFrontResponse::set_allocated_user_info(::AdEngineFront::AdFrontResponse_UserInfo* user_info) {
  delete user_info_;
  user_info_ = user_info;
  if (user_info) {
    set_has_user_info();
  } else {
    clear_has_user_info();
  }
}

// repeated .AdEngineFront.AdFrontResponse.PositionInfo position_info = 3;
inline int AdFrontResponse::position_info_size() const {
  return position_info_.size();
}
inline void AdFrontResponse::clear_position_info() {
  position_info_.Clear();
}
inline const ::AdEngineFront::AdFrontResponse_PositionInfo& AdFrontResponse::position_info(int index) const {
  return position_info_.Get(index);
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo* AdFrontResponse::mutable_position_info(int index) {
  return position_info_.Mutable(index);
}
inline ::AdEngineFront::AdFrontResponse_PositionInfo* AdFrontResponse::add_position_info() {
  return position_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontResponse_PositionInfo >&
AdFrontResponse::position_info() const {
  return position_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::AdEngineFront::AdFrontResponse_PositionInfo >*
AdFrontResponse::mutable_position_info() {
  return &position_info_;
}

// optional string algorithm_bucket = 4;
inline bool AdFrontResponse::has_algorithm_bucket() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AdFrontResponse::set_has_algorithm_bucket() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AdFrontResponse::clear_has_algorithm_bucket() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AdFrontResponse::clear_algorithm_bucket() {
  if (algorithm_bucket_ != &::google::protobuf::internal::kEmptyString) {
    algorithm_bucket_->clear();
  }
  clear_has_algorithm_bucket();
}
inline const ::std::string& AdFrontResponse::algorithm_bucket() const {
  return *algorithm_bucket_;
}
inline void AdFrontResponse::set_algorithm_bucket(const ::std::string& value) {
  set_has_algorithm_bucket();
  if (algorithm_bucket_ == &::google::protobuf::internal::kEmptyString) {
    algorithm_bucket_ = new ::std::string;
  }
  algorithm_bucket_->assign(value);
}
inline void AdFrontResponse::set_algorithm_bucket(const char* value) {
  set_has_algorithm_bucket();
  if (algorithm_bucket_ == &::google::protobuf::internal::kEmptyString) {
    algorithm_bucket_ = new ::std::string;
  }
  algorithm_bucket_->assign(value);
}
inline void AdFrontResponse::set_algorithm_bucket(const char* value, size_t size) {
  set_has_algorithm_bucket();
  if (algorithm_bucket_ == &::google::protobuf::internal::kEmptyString) {
    algorithm_bucket_ = new ::std::string;
  }
  algorithm_bucket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdFrontResponse::mutable_algorithm_bucket() {
  set_has_algorithm_bucket();
  if (algorithm_bucket_ == &::google::protobuf::internal::kEmptyString) {
    algorithm_bucket_ = new ::std::string;
  }
  return algorithm_bucket_;
}
inline ::std::string* AdFrontResponse::release_algorithm_bucket() {
  clear_has_algorithm_bucket();
  if (algorithm_bucket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = algorithm_bucket_;
    algorithm_bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AdFrontResponse::set_allocated_algorithm_bucket(::std::string* algorithm_bucket) {
  if (algorithm_bucket_ != &::google::protobuf::internal::kEmptyString) {
    delete algorithm_bucket_;
  }
  if (algorithm_bucket) {
    set_has_algorithm_bucket();
    algorithm_bucket_ = algorithm_bucket;
  } else {
    clear_has_algorithm_bucket();
    algorithm_bucket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 processing_time_ms = 5;
inline bool AdFrontResponse::has_processing_time_ms() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AdFrontResponse::set_has_processing_time_ms() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AdFrontResponse::clear_has_processing_time_ms() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AdFrontResponse::clear_processing_time_ms() {
  processing_time_ms_ = 0;
  clear_has_processing_time_ms();
}
inline ::google::protobuf::int32 AdFrontResponse::processing_time_ms() const {
  return processing_time_ms_;
}
inline void AdFrontResponse::set_processing_time_ms(::google::protobuf::int32 value) {
  set_has_processing_time_ms();
  processing_time_ms_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AdEngineFront

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_engine_5fadfront_2eproto__INCLUDED
